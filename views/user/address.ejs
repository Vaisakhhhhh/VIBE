<div>
    <!-- Include header partials  -->
    <div class="z-50 fixed w-full">
        <%- include("partials/header") %>
    </div>

    <div class="sm:flex sm:justify-center sm:space-x-4 px-4 sm:px-0 pt-28 sm:pt-24 sm:mb-8 mb-2">

        <div class="hidden sm:block">
            <!-- Include sidebar partials  -->
            <%- include("partials/sidebar") %>
        </div>

         <div class="w-full lg:w-[900px] sm:bg-white sm:border min-h-96 sm:min-h-[607px] sm:shadow-md sm:rounded">
            <div class="w-full px-0 sm:px-10 py-4 sm:py-8">
                <h2 class="font-semibold text-xl mb-4 text-gray-800 ">Manage Addresses</h2>

                <!-- Add Address Button -->
                <button id="addAddressButton" class="bg-black font-semibold text-white px-4 py-2 rounded hover:bg-gray-900 mb-2" onclick="toggleAddressForm()">
                    <i class="fa-solid fa-plus fa-sm mr-2"></i> Add Address
                </button>

                <!-- Add Address Form - Hidden by default -->
                <div id="addressForm" class="mt-4 hidden border rounded p-4 shadow-md ">
                    <form id="addAddressForm">
                        <div class="grid grid-cols-2 gap-4 mb-4">
                           <div>
                            <input type="text" id="name" name="name" placeholder="Name" class="border p-2 rounded border border-gray-400 w-full">
                            <p id="nameError" class="text-red-500 text-sm text-center"></p>
                           </div>
                            <div>
                                <input type="text" id="mobileNumber" name="mobileNumber" placeholder="10-digit mobile number" class="border p-2 rounded border border-gray-400 w-full">
                                <p id="mobileNumberError" class="text-red-500 text-sm text-center"></p>
                            </div>
                           <div>
                            <input type="text" id="pincode" name="pincode" placeholder="Pincode"  class="border p-2 rounded border border-gray-400 w-full">
                            <p id="pincodeError" class="text-red-500 text-sm text-center"></p>
                           </div>
                           <div>
                            <select id="locality" name="locality" class="border p-2 rounded border border-gray-400 w-full">
                                <option value="">Select Locality</option>
                            </select>
                            <p id="localityError" class="text-red-500 text-sm text-center"></p>
                           </div>
                          <div class="col-span-2">
                            <textarea id="address" name="address" placeholder="Address (Area and Street)"  class="border p-2 rounded border border-gray-400  w-full"></textarea>
                            <p id="addressError" class="text-red-500 text-sm text-center"></p>
                          </div>
                          <div>
                            <input type="text" id="city" name="city" placeholder="City/District/Town"  class="border p-2 rounded border border-gray-400 w-full">
                            <p id="cityError" class="text-red-500 text-sm text-center"></p>
                          </div>
                          <div>
                            <input type="text" id="state" name="state" placeholder="state" class="border p-2 rounded border border-gray-400 w-full" >
                            <p id="stateError" class="text-red-500 text-sm text-center"></p>
                          </div>
                          <div>
                            <input type="text" id="landmark" name="landmark" placeholder="Landmark (Optional)" class="border p-2 rounded border border-gray-400 w-full">
                            <p id="landmarkError" class="text-red-500 text-sm text-center"></p>
                          </div>
                            <div>
                                <input type="text" id="alternatePhone" name="alternatePhone" placeholder="Alternate Phone (Optional)" class="border p-2 rounded border border-gray-400 w-full">
                                <p id="alternatePhoneError" class="text-red-500 text-sm text-center"></p>
                            </div>
                        </div>

                        <!-- Address Type Radio Buttons -->
                        <div class="mb-4">
                            <span class="block text-gray-400 ml-2">Address Type</span>
                            <label class="ml-2">
                                <input type="radio" name="addressType" value="Home" > Home
                            </label>
                            <label class="ml-2">
                                <input type="radio" name="addressType" value="Work" > Work
                            </label>
                            <p id="addressTypeError" class="text-red-500 text-sm"></p>
                        </div>

                        <!-- Form Submit and Cancel Buttons -->
                        <div class="flex justify-end space-x-4">
                            <button type="button" class="text-black font-semibold" onclick="cancelAddressForm()">Cancel</button>
                            <button type="submit" class="bg-black text-white font-semibold px-8 py-2 rounded-md hover:bg-gray-900">Save</button>
                        </div>
                    </form>
                </div>

                

               <!-- Address Display Section -->
                <% addresses.forEach((address, index) => { %>
                    <div class="w-full mt-2">
                        <div id="addressBox-<%=index%>" class="bg-white border border-gray-300 rounded p-4 w-full shadow-md">
                            <!-- Header with HOME label and action icons -->
                            <div class="flex justify-between items-center">
                                <!-- Home label -->
                                <span class="text-xs font-semibold uppercase bg-gray-200 text-gray-600 px-2 py-1 rounded">
                                <%= address.addressType %>
                                </span>
                                <!-- Action icons (Edit and Delete) -->
                                <div class="flex space-x-4 text-gray-600">
                                    <button title="Edit" class="flex items-center space-x-1 hover:text-blue-500" onclick="toggleEditAddressForm('<%=index%>')">
                                        <i class="fas fa-edit"></i>
                                        <span>Edit</span>
                                    </button>
                                    <button title="Delete" class="flex items-center space-x-1 hover:text-red-500"
                                        onclick="showDeleteConfirmationModal(`<%= address._id%>`, `<%=index%>`)">
                                        <i class="fas fa-trash-alt"></i>
                                        <span>Delete</span>
                                    </button>
                                </div>
                            </div>
                        
                            <!-- Address content -->
                            <div class="mt-4 text-gray-700 leading-relaxed">
                                <p class="font-semibold"><span class="font-bold mr-4"><%= address.name %></span> <%= address.mobileNumber %></p>
                                <p class="w-[200px] sm:w-[500px]"><%= address.address %>, <%=address.locality %>, <%= address.city %>, <%= address.state %> - 
                                    <span class="font-bold"><%= address.pincode %></span>
                                </p>
                            </div>
                        </div>
                    
                        <!-- Edit Address Form - Hidden by default -->
                        <div id="editAddressForm-<%=index%>" class="mt-4 hidden border rounded p-4 shadow-lg ">
                            <form id="editAddressForm<%=index%>">
                                <div class="grid grid-cols-2 gap-4 mb-4">
                                    <input type="text" id="addressId<%=index%>" value="<%=address.id%>" hidden>
                                    <div>
                                        <input type="text" id="name<%=index%>" name="name" placeholder="Name" value="<%= address.name %>" class="border p-2 rounded border border-gray-400 w-full">
                                        <p id="nameError<%=index%>" class="text-red-500 text-sm text-center"></p>
                                    </div>
                                    <div>
                                        <input type="text" id="mobileNumber<%=index%>" name="mobileNumber" placeholder="10-digit mobile number" value="<%= address.mobileNumber %>" class="border p-2 rounded border border-gray-400 w-full">
                                        <p id="mobileNumberError<%=index%>" class="text-red-500 text-sm text-center"></p>
                                    </div>
                                    <div>
                                        <input type="text" id="pincode<%=index%>" name="pincode" placeholder="Pincode" value="<%= address.pincode %>" class="border p-2 rounded border border-gray-400 w-full">
                                        <p id="pincodeError<%=index%>" class="text-red-500 text-sm text-center"></p>
                                    </div>
                                    <div>
                                        <select id="locality<%=index%>" name="locality" class="border p-2 rounded border border-gray-400 w-full">
                                            <option disabled>Select Locality</option>
                                            <option selected><%= address.locality %></option>
                                        </select>
                                        <p id="localityError<%=index%>" class="text-red-500 text-sm text-center"></p>
                                    </div>
                                    <div class="col-span-2">
                                        <textarea id="address<%=index%>" name="address" placeholder="Address (Area and Street)" class="border p-2 rounded border border-gray-400 w-full"><%= address.address %></textarea>
                                        <p id="addressError<%=index%>" class="text-red-500 text-sm text-center"></p>
                                    </div>
                                    <div>
                                        <input type="text" id="city<%=index%>" name="city" placeholder="City/District/Town" value="<%= address.city %>" class="border p-2 rounded border border-gray-400 w-full">
                                        <p id="cityError<%=index%>" class="text-red-500 text-sm text-center"></p>
                                    </div>
                                    <div>
                                        <input type="text" id="state<%=index%>" name="state" placeholder="State" value="<%= address.state %>" class="border p-2 rounded border border-gray-400 w-full">
                                        <p id="stateError<%=index%>" class="text-red-500 text-sm text-center"></p>
                                    </div>
                                    <div>
                                        <input type="text" id="landmark<%=index%>" name="landmark" placeholder="Landmark (Optional)" value="<%= address.landmark %>" class="border p-2 rounded border border-gray-400 w-full">
                                        <p id="landmarkError<%=index%>" class="text-red-500 text-sm text-center"></p>
                                    </div>
                                    <div>
                                        <input type="text" id="alternatePhone<%=index%>" name="alternatePhone" placeholder="Alternate Phone (Optional)" value="<%= address.alternatePhone %>" class="border p-2 rounded border border-gray-400 w-full">
                                        <p id="alternatePhoneError<%=index%>" class="text-red-500 text-sm text-center"></p>
                                    </div>
                                </div>
                    
                                <!-- Address Type Radio Buttons -->
                                <div class="mb-4">
                                    <span class="block text-gray-400 ml-2">Address Type</span>
                                    <label class="ml-2">
                                        <input type="radio" <%= address.addressType === "Home" ? "checked" : "" %> name="addressType<%=index%>" value="Home"> Home
                                    </label>
                                    <label class="ml-2">
                                        <input type="radio" <%= address.addressType === "Work" ? "checked" : "" %> name="addressType<%=index%>" value="Work"> Work
                                    </label>
                                    <p id="addressTypeError<%=index%>" class="text-red-500 text-sm"></p>
                                </div>
                    
                                <!-- Form Submit and Cancel Buttons -->
                                <div class="flex justify-end space-x-4">
                                    <button type="button" class="text-black font-semibold" onclick="cancelEditAddressForm('<%=index%>')">Cancel</button>
                                    <button type="submit" class="bg-black text-white px-8 py-2 rounded-md hover:bg-gray-900 font-semibold" onclick="handleEditFormSubmit('<%=index%>')">Save</button>
                                </div>
                            </form>
                        </div>
                    </div>
                    <% }) %>
            
                
            </div>
         </div>
    </div>

    <!-- Include footer partial  -->
     <%-include("partials/footer") %>
</div>




<!-- Delete Confirmation Modal -->
<div id="deleteConfirmationModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-white rounded py-8 px-6 w-full max-w-md mx-4 sm:mx-auto">
        <p class="text-center text-lg font-semibold mb-8 text-gray-800">Are you sure you want to delete this address?</p>
        <div class="flex justify-center space-x-4">
            
            <button id="cancelDeleteBtn" class="text-gray-500 px-4 py-2 font-semibold rounded-lg hover:text-gray-700 focus:outline-none">
                Cancel
            </button>
            <button id="confirmDeleteBtn" class="bg-black text-white px-4 py-2 rounded font-semibold hover:bg-gray-900 focus:outline-none">
                Yes, Delete
            </button>
        </div>
    </div>
</div>




<script>
     // Function to hide all forms
function hideAllForms() {
    // Hide Add Address form and show the Add button
    const addForm = document.getElementById("addressForm");
    const addButton = document.getElementById("addAddressButton");
    if (addForm && !addForm.classList.contains("hidden")) {
        addForm.classList.add("hidden");
        addButton.classList.remove("hidden");
    }

    // Hide all Edit Address forms and show their respective address boxes
    const editForms = document.querySelectorAll('[id^="editAddressForm-"]');
    const addressBoxes = document.querySelectorAll('[id^="addressBox-"]');

    editForms.forEach((form) => {
        form.classList.add("hidden");
    });
    addressBoxes.forEach((box) => {
        box.classList.remove("hidden");
    });
}

// Toggle the visibility of the Add Address form and button
function toggleAddressForm() {
    hideAllForms(); // Hide all forms first

    const form = document.getElementById("addressForm");
    const button = document.getElementById("addAddressButton");

    if (form.classList.contains("hidden")) {
        form.classList.remove("hidden");
        button.classList.add("hidden");
    } else {
        form.classList.add("hidden");
        button.classList.remove("hidden");
    }
}

// Toggle the visibility of the Edit Address form and hide the address box
function toggleEditAddressForm(index) {
    hideAllForms(); // Hide all forms first

    const form = document.getElementById(`editAddressForm-${index}`);
    const button = document.getElementById(`addressBox-${index}`);

    if (form.classList.contains("hidden")) {
        form.classList.remove("hidden");
        button.classList.add("hidden");
    } else {
        form.classList.add("hidden");
        button.classList.remove("hidden");
    }
}

// Cancel the Add Address form and show the Add Address button
function cancelAddressForm() {
    document.getElementById("addressForm").classList.add("hidden");
    document.getElementById("addAddressButton").classList.remove("hidden");
}

// Cancel the Edit Address form and show the respective address box
function cancelEditAddressForm(index) {
    document.getElementById(`editAddressForm-${index}`).classList.add("hidden");
    document.getElementById(`addressBox-${index}`).classList.remove("hidden");
}



   // Implementing postal code with auto fill locality, state and disticte fields
    document.getElementById('pincode').addEventListener('input', async (e) => {
    const pincode = e.target.value;

    // Only make the API call when the pincode is exactly 6 digits
    if (/^\d{6}$/.test(pincode)) {
        try {
            const response = await fetch(`https://api.postalpincode.in/pincode/${pincode}`);
            const data = await response.json();

            if (data[0].Status === "Success") {
                const localities = data[0].PostOffice;

                // Get the locality select dropdown element
                const localitySelect = document.getElementById('locality');

                // Clear previous options
                localitySelect.innerHTML = '';

                // Populate dropdown with options for each locality
                localities.forEach(postOffice => {
                    const option = document.createElement('option');
                    option.value = postOffice.Name;
                    option.textContent = postOffice.Name;
                    localitySelect.appendChild(option);
                });

                // Optionally, fill city and state based on the first entry
                document.getElementById('city').value = localities[0].District || '';
                document.getElementById('state').value = localities[0].State || '';

            } else {
                console.error("No data found for this pincode.");
            }
        } catch (error) {
            console.error("Error fetching location data:", error);
        }
    }
});



//---------------------- Add Address -----------------------------


   
document.getElementById("addAddressForm").addEventListener("submit", async (e) => {
    e.preventDefault(); // Prevent the default form submission

    let isValid = true;

    // Name validation
    const name = document.getElementById('name').value;
    const nameError = document.getElementById('nameError');
    if (!name) {
        nameError.textContent = 'Please enter a name.';
        isValid = false;
    } else if (name.length < 3 || name.length > 25 || /[^a-zA-Z0-9 ]/.test(name)) {
        nameError.textContent = 'Name must be alphanumeric and between 3 to 25 characters.';
        isValid = false;
    } else {
        nameError.textContent = '';
    }

    // Mobile Number validation
    const mobileNumber = document.getElementById('mobileNumber').value;
    const mobileNumberError = document.getElementById('mobileNumberError'); // Corrected ID
    if (!/^\d{10}$/.test(mobileNumber)) {
        mobileNumberError.textContent = 'Enter a valid 10-digit mobile number.';
        isValid = false;
    } else {
        mobileNumberError.textContent = '';
    }

    // Pincode validation
    const pincode = document.getElementById('pincode').value;
    const pincodeError = document.getElementById('pincodeError'); // Corrected ID
    if (!/^\d{6}$/.test(pincode)) {
        pincodeError.textContent = 'Pincode must be 6 digits';
        isValid = false;
    } else {
        pincodeError.textContent = '';
    }

    // Locality validation
    const locality = document.getElementById('locality').value;
    const localityError = document.getElementById('localityError'); // Corrected ID
    if (!locality) {
        localityError.textContent = 'Locality is required';
        isValid = false;
    } else {
        localityError.textContent = '';
    }

    // Address validation
    const address = document.getElementById('address').value;
    const addressError = document.getElementById('addressError'); // Corrected ID
    if (!address) {
        addressError.textContent = 'Address is required';
        isValid = false;
    } else {
        addressError.textContent = '';
    }

    // City validation
    const city = document.getElementById('city').value;
    const cityError = document.getElementById('cityError'); // Corrected ID
    if (!city) {
        cityError.textContent = 'City is required';
        isValid = false;
    } else {
        cityError.textContent = '';
    }

    // State validation
    const state = document.getElementById('state').value;
    const stateError = document.getElementById('stateError'); // Corrected ID
    if (!state) {
        stateError.textContent = 'State is required';
        isValid = false;
    } else {
        stateError.textContent = '';
    }

    // Alternate phone validation
    const alternatePhone = document.getElementById('alternatePhone').value;
    const alternatePhoneError = document.getElementById('alternatePhoneError'); // Corrected ID
    if (alternatePhone && !/^\d{10}$/.test(alternatePhone)) {
        alternatePhoneError.textContent = 'Enter a valid 10-digit phone number';
        isValid = false;
    } else {
        alternatePhoneError.textContent = '';
    }

     // Address Type validation
     const addressTypee = document.querySelector('input[name="addressType"]:checked');
    const addressTypeError = document.getElementById('addressTypeError');
    if (!addressTypee) {
        addressTypeError.textContent = 'Please select an address type.';
        isValid = false;
    } else {
        addressTypeError.textContent = '';
    }

    // Stop form submission if validation fails
    if (!isValid) return;


    const landmark = document.getElementById('landmark').value;

    
       
        const addressType = addressTypee.value;
        

    // Sent the form data using fetch
    try {
        const response = await fetch('/user/address', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json'  
        },
            body: JSON.stringify({name, mobileNumber, pincode, locality, address, city, state, landmark, alternatePhone, addressType})
        });

        const result = await response.json();

        if(response.ok) {
            
            localStorage.setItem('addressAdded', result.message);
              window.location.reload();
           
        } else {
            console.log(result.message);
        }
    } catch (error) {
        console.log(error);
    }
  
});



//--------------------------- Edit Address ----------------------------



function handleEditFormSubmit(index) {
    const form = document.getElementById(`editAddressForm${index}`);
    
    form.addEventListener("submit", async (e) => {
        e.preventDefault();
        
        let isValid = true;
        
       

       // Name validation
    const name = document.getElementById(`name${index}`).value;
    const nameError = document.getElementById(`nameError${index}`);
    if (!name) {
        nameError.textContent = 'Please enter a name.';
        isValid = false;
    } else if (name.length < 3 || name.length > 25 || /[^a-zA-Z0-9 ]/.test(name)) {
        nameError.textContent = 'Name must be alphanumeric and between 3 to 25 characters.';
        isValid = false;
    } else {
        nameError.textContent = '';
    }

    // Mobile Number validation
    const mobileNumber = document.getElementById(`mobileNumber${index}`).value;
    const mobileNumberError = document.getElementById(`mobileNumberError${index}`); 
    if (!/^\d{10}$/.test(mobileNumber)) {
        mobileNumberError.textContent = 'Enter a valid 10-digit mobile number.';
        isValid = false;
    } else {
        mobileNumberError.textContent = '';
    }

    // Pincode validation
    const pincode = document.getElementById(`pincode${index}`).value;
    const pincodeError = document.getElementById(`pincodeError${index}`); 
    if (!/^\d{6}$/.test(pincode)) {
        pincodeError.textContent = 'Pincode must be 6 digits';
        isValid = false;
    } else {
        pincodeError.textContent = '';
    }

    // Locality validation
    const locality = document.getElementById(`locality${index}`).value;
    const localityError = document.getElementById(`localityError${index}`); 
    if (!locality) {
        localityError.textContent = 'Locality is required';
        isValid = false;
    } else {
        localityError.textContent = '';
    }

    // Address validation
    const address = document.getElementById(`address${index}`).value;
    const addressError = document.getElementById(`addressError${index}`);
    if (!address) {
        addressError.textContent = 'Address is required';
        isValid = false;
    } else {
        addressError.textContent = '';
    }

    // City validation
    const city = document.getElementById(`city${index}`).value;
    const cityError = document.getElementById(`cityError${index}`); 
    if (!city) {
        cityError.textContent = 'City is required';
        isValid = false;
    } else {
        cityError.textContent = '';
    }

    // State validation
    const state = document.getElementById(`state${index}`).value;
    const stateError = document.getElementById(`stateError${index}`); 
    if (!state) {
        stateError.textContent = 'State is required';
        isValid = false;
    } else {
        stateError.textContent = '';
    }

    // Alternate phone validation
    const alternatePhone = document.getElementById(`alternatePhone${index}`).value;
    const alternatePhoneError = document.getElementById(`alternatePhoneError${index}`); 
    if (alternatePhone && !/^\d{10}$/.test(alternatePhone)) {
        alternatePhoneError.textContent = 'Enter a valid 10-digit phone number';
        isValid = false;
    } else {
        alternatePhoneError.textContent = '';
    }

     // Address Type validation
     const addressType = document.querySelector(`input[name="addressType${index}"]:checked`);
    const addressTypeError = document.getElementById(`addressTypeError${index}`);
    if (!addressType) {
        addressTypeError.textContent = 'Please select an address type.';
        isValid = false;
    } else {
        addressTypeError.textContent = '';
    }

    
        
        if (!isValid) return;

        const  addressId = document.getElementById(`addressId${index}`).value;

        const formData = {
          
           name,
           mobileNumber,
           pincode,
           locality,
           address,
           city,
           state,
           landmark : document.getElementById(`landmark${index}`).value,
           alternatePhone,
           addressType : addressType.value
        };

      

        
        
        try {
            const response = await fetch(`/user/address/${addressId}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(formData)
            });
            
            const result = await response.json();
            
            if (response.ok) {
              
                localStorage.setItem('addressEdited', result.message);
            
                window.location.reload();
        
            } else {
                
                Toastify({
                        text: result.message,
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "center", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #ff4e50, #f44336)",
                        },
                        onClick: function(){} // Callback after click
                        }).showToast();
            }
        } catch (error) {
            console.error(error);
        }
    });
}


//----------------------- Delete Address ------------------------


// Function to show the delete confirmation modal
function showDeleteConfirmationModal(addressId, index) {
    
    const modal = document.getElementById('deleteConfirmationModal');
    modal.classList.remove('hidden');

    const confirmButton = document.getElementById('confirmDeleteBtn');
    confirmButton.onclick = () => {
        deleteAddress(addressId, index);
        modal.classList.add('hidden');
    }

    const cancelButton = document.getElementById('cancelDeleteBtn');
    cancelButton.onclick = () => {
        modal.classList.add('hidden');
    }
}

async function deleteAddress (addressId, index) {

    try {
        const response = await fetch(`/user/address/${addressId}`, {
            method: 'DELETE',
        }); 

        const result = await response.json();

        if(response.ok) {

            document.getElementById(`addressBox-${index}`).remove();

            Toastify({
                        text: result.message,
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "center", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        onClick: function(){} // Callback after click
                        }).showToast();

           

        } else {
            console.log(result.message);
            Toastify({
                        text: result.message,
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "center", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                             background: "linear-gradient(to right, #ff4e50, #f44336)"
                           
                        },
                        onClick: function(){} // Callback after click
                        }).showToast();
        }

    } catch (error) {
        console.log('Error deleting address :', error);
        Toastify({
                        text: "Oops! Something went wrong. Please try again later.",
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "center", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                             background: "linear-gradient(to right, #ff4e50, #f44336)"
                           
                        },
                        onClick: function(){} // Callback after click
                        }).showToast();
    }
}





window.addEventListener('DOMContentLoaded', () => {
        const addressAdded = localStorage.getItem('addressAdded');
        const addressEdited = localStorage.getItem('addressEdited');

        if(addressAdded){
            Toastify({
                        text: addressAdded,
                        duration: 5000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "center", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        onClick: function(){} // Callback after click
                        }).showToast();

            localStorage.removeItem('addressAdded');
        }

        if(addressEdited) {
            Toastify({
                        text: addressEdited,
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "center", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        onClick: function(){} // Callback after click
                        }).showToast();

            localStorage.removeItem('addressEdited');
        }
    });
</script>