<div>
    <div class="z-50 fixed w-full">
        <!-- Include header partial  -->
        <%- include("partials/header") %>
    </div>

    <div class="flex space-x-4 justify-center pt-24">
        <!-- Include sidebar partials  -->
        <%- include("partials/sidebar") %>

        <div class="w-[900px] h-full bg-white border rounded shadow-md mb-8">
            <div class="w-full h-[400px] pl-10 pt-8">
                <h3 class="font-semibold text-gray-800 text-xl">Personal Information</h3>

                <!-- Name Input Section -->
                <div class="mt-6">
                    <label for="name" class="block">Name</label>
                    <!-- Flex container for input and icons to keep them aligned -->
                    <div class="flex items-center">
                        <div>
                            <input id="name-input" type="text" name="name" value="<%=userData.name%>" 
                                class="py-2 px-4 border rounded border-gray-300 w-96" disabled>
                        </div>
                
                        <!-- Icons for edit, cancel, and save -->
                        <div id="edit-icon" class="ml-2 cursor-pointer">
                            <i class="fa-solid fa-pen-to-square fa-lg hover:text-blue-500"></i>
                        </div>
                        <div id="cancel-icon" class="ml-2 cursor-pointer hidden">
                            <i class="fa-solid fa-times fa-lg text-red-500 hover:text-red-700"></i>
                        </div>
                        <div id="save-icon" class="ml-2 cursor-pointer hidden">
                            <i class="fa-solid fa-check fa-lg text-green-500 hover:text-green-700"></i>
                        </div>
                    </div>
                
                    <!-- Fixed-height error message area below the input and icons -->
                    <span id="name-error" class="text-red-500 text-sm hidden block h-6"></span>
                </div>
                

                <!-- Mobile Number Input Section -->
                <div class="mt-6">

                    <label for="mobileNumber" class="block">Mobile Number</label>

                    <div class="flex items-center">
                        <input id="mobile-number-input" type="text" name="mobileNumber" value="<%= userData.mobileNumber %>" class="py-2 px-4 border rounded border-gray-300 w-96 inline-block" disabled>
                       
    
                        <div id="mobile-number-edit-icon" class="inline-block ml-2 cursor-pointer">
                            <% if ( userData.mobileNumber ) { %>
                                <i class="fa-solid fa-pen-to-square fa-lg hover:text-blue-500"></i>
                            <% } else { %>
                                <i class="fa-solid fa-plus fa-lg hover:text-blue-500"></i> <span class="ml-2">Add a Number</span>
                            <% } %>
                        </div>
                        
                        <div id="mobile-number-cancel-icon" class="inline-block ml-2 cursor-pointer hidden">
                            <i class="fa-solid fa-times fa-lg text-red-500 hover:text-red-700"></i>
                        </div>
    
                        <div id="mobile-number-save-icon" class="inline-block ml-2 cursor-pointer hidden">
                            <i class="fa-solid fa-check fa-lg text-green-500 hover:text-green-700"></i>
                        </div>
                    </div>

                    <span id="mobile-error" class="text-red-500 text-sm hidden">Invalid number. Must be 10 digits.</span>
                   
                   
                </div>

                
                <!-- Email Input  -->
                <div class="mt-6">
                    <label for="name" class="block ">Email</label>
                    <input type="text" name="email" value="<%=userData.email%>" class="py-2 px-4 border rounded border-gray-300 w-96 inline-block" disabled>

                </div>
            </div>
            <div class="w-full h-full pl-10">
                <h2 class="font-semibold text-lg ">FAQs</h2>

                <ul class="pt-4 space-y-4">
                    <li class="font-semibold">
                        What happens when I update my email address?
                    </li>
                    <li>
                        Your login email id changes, likewise. You'll receive all your account related communication on your updated email address.
                    </li>
                    <li class="font-semibold">
                        When will my VIBE account be updated with the new email address?
                    </li>
                    <li>
                        It happens as soon as you confirm the verification code sent to your email and save the changes.
                    </li>
                </ul>
                <div>
                    <h2 class="font-semibold text-red-700 hover:text-red-500 my-8 cursor-pointer inline-block">Delete Account</h2>
                </div>
            </div>
        </div>
    </div>

    <!-- Include footer partials  -->
     <%- include("partials/footer") %>
</div>

<script>

   
   
    // Utility function for showing and hiding error messages
    function showError(element, message) {
        element.textContent = message;
        element.classList.remove('hidden');
    }

    function hideError(element) {
        element.classList.add('hidden');
    }

    // Name input elements and validation
    const nameInput = document.getElementById('name-input');
    const nameError = document.getElementById('name-error');
    const editIcon = document.getElementById('edit-icon');
    const saveIcon = document.getElementById('save-icon');
    const cancelIcon = document.getElementById('cancel-icon');

    editIcon.addEventListener('click', () => {
        nameInput.disabled = false;
        editIcon.classList.add('hidden');
        saveIcon.classList.remove('hidden');
        cancelIcon.classList.remove('hidden');
    });

    saveIcon.addEventListener('click', async () => {
        const nameValue = nameInput.value.trim();

        // Validate name: min 3, max 25 characters, letters only
        const isNameValid = /^[A-Za-z\s]{3,25}$/.test(nameValue);
        if (!isNameValid) {
            showError(nameError, "Invalid name. Must be 3-25 characters, letters only.");
            return;
        }
        hideError(nameError);

        // Send data to backend
        try {
            const response = await fetch('/user/update-profile', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name: nameValue})
            });
            if (response.ok) {
                nameInput.disabled = true;
                editIcon.classList.remove('hidden');
                saveIcon.classList.add('hidden');
                cancelIcon.classList.add('hidden');

                localStorage.setItem('nameUpdated', 'Name updated successfully!');
           
                window.location.reload();
            
            }
        } catch (error) {
            console.error("Error updating name:", error);
        }
    });

    cancelIcon.addEventListener('click', () => {
        nameInput.disabled = true;
        nameInput.value = "<%= userData.name %>";
        editIcon.classList.remove('hidden');
        saveIcon.classList.add('hidden');
        cancelIcon.classList.add('hidden');
        hideError(nameError);
    });

    // Mobile number input elements and validation
    const mobileNumberInput = document.getElementById('mobile-number-input');
    const mobileError = document.getElementById('mobile-error');
    const mobileNumberEditIcon = document.getElementById('mobile-number-edit-icon');
    const mobileNumberSaveIcon = document.getElementById('mobile-number-save-icon');
    const mobileNumberCancelIcon = document.getElementById('mobile-number-cancel-icon');

    mobileNumberEditIcon.addEventListener('click', () => {
        mobileNumberInput.disabled = false;
        mobileNumberEditIcon.classList.add('hidden');
        mobileNumberSaveIcon.classList.remove('hidden');
        mobileNumberCancelIcon.classList.remove('hidden');
    });

    mobileNumberSaveIcon.addEventListener('click', async () => {
        const mobileNumberValue = mobileNumberInput.value.trim();

        // Validate mobile number: must be exactly 10 digits
        const isMobileValid = /^[0-9]{10}$/.test(mobileNumberValue);
        if (!isMobileValid) {
            showError(mobileError, "Invalid number. Must be 10 digits.");
            return;
        }
        hideError(mobileError);

        // Send data to backend
        try {
            const response = await fetch('/user/update-profile', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ mobileNumber: mobileNumberValue })
            });
            if (response.ok) {
                mobileNumberInput.disabled = true;
                mobileNumberEditIcon.classList.remove('hidden');
                mobileNumberSaveIcon.classList.add('hidden');
                mobileNumberCancelIcon.classList.add('hidden');

                localStorage.setItem('mobileUpdated', 'Mobile number updated successfully!');
        
                window.location.reload();
           
            }
        } catch (error) {
            console.error("Error updating mobile number:", error);
        }
    });

    mobileNumberCancelIcon.addEventListener('click', () => {
        mobileNumberInput.disabled = true;
        mobileNumberInput.value = "<%= userData.mobile %>";
        mobileNumberEditIcon.classList.remove('hidden');
        mobileNumberSaveIcon.classList.add('hidden');
        mobileNumberCancelIcon.classList.add('hidden');
        hideError(mobileError);
    });



    window.addEventListener('DOMContentLoaded', () => {
        const nameUpdated = localStorage.getItem('nameUpdated');
        const mobileUpdated = localStorage.getItem('mobileUpdated');

        if(nameUpdated){
            Toastify({
                        text: 'Name updated successfully!',
                        duration: 5000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "center", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        onClick: function(){} // Callback after click
                        }).showToast();

            localStorage.removeItem('nameUpdated');
        }

        if(mobileUpdated) {
            Toastify({
                        text: 'Mobile number updated successfully!',
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "center", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        onClick: function(){} // Callback after click
                        }).showToast();

            localStorage.removeItem('mobileUpdated');
        }
    });
</script>
