
<div>
    
   <!-- include the sidebar partial  -->
   <%- include('partials/sidebar') %>


     <!-- Navbar -->
<div class="fixed top-0 left-0 right-0 z-10 flex items-center justify-between p-8 h-20 shadow-md ml-64 bg-gray-100">
    <div>
        <!-- Default content goes here -->
        <h2 class="text-lg font-semibold">Products</h2>
    </div>
    <div>
        <h2 class="text-lg font-semibold">Edit Product</h2>
    </div>
  </div>

  <div class="ml-72 mr-8 pb-24 pt-28">
    <form id="editProductForm"  class="space-y-4">
      
      <!-- Product Name and Description -->
      <div class="flex space-x-4">
        <div class="w-1/2">
          <label for="name" class="block">Product Name</label>
          <input type="text" id="name" name="name" value="<%= product.name %>" class="border border-gray-300 p-2 w-full" required />
          <p id="productNameError" class="text-red-500 text-sm " aria-live="assertive"></p>
        </div>
        <div class="w-1/2">
          <label for="description" class="block">Description</label>
          <input type="text" id="description" name="description" value="<%= product.description %>" class="border border-gray-300 p-2 w-full" required>
          <p id="descriptionError" class="text-red-500 text-sm" aria-live="assertive"></p>
        </div>
      </div>
  
      <!-- Price and Discount -->
      <div class="flex space-x-4">
        <div class="w-1/2">
          <label for="price" class="block">Price</label>
          <input type="number" id="price" name="price" value="<%= product.price %>" class="border border-gray-300 p-2 w-full" min="0" required />
          <p id="priceError" class="text-red-500 text-sm" aria-live="assertive"></p>
        </div>
        <div class="w-1/2">
          <label for="discount" class="block">Discount</label>
          <input type="number" id="discount" name="discount" value="<%= product.discount %>" class="border border-gray-300 p-2 w-full" min="0" required />
          <p id="discountError" class="text-red-500 text-sm" aria-live="assertive"></p>
        </div>
      </div>
  
      <!-- Stock and Warranty -->
      <div class="flex space-x-4">
        <div class="w-1/2">
          <label for="stock" class="block">Stock</label>
          <input type="number" id="stock" name="stock" value="<%= product.stock %>" class="border border-gray-300 p-2 w-full" min="0" required />
          <p id="stockError" class="text-red-500 text-sm" aria-live="assertive"></p>
        </div>
        <div class="w-1/2">
          <label for="warranty" class="block">Warranty</label>
          <input type="number" id="warranty" name="warranty" value="<%= product.warranty %>" class="border border-gray-300 p-2 w-full" min="0" required />
          <p id="warrantyError" class="text-red-500 text-sm" aria-live="assertive"></p>
        </div>
      </div>
  
      <!-- Brand and Category -->
      <div class="flex space-x-4">
        <div class="w-1/2">
          <label for="brand" class="block">Brand</label>
          <select id="brand" name="brand" class="border border-gray-300 p-2 w-full" required>
            <option value="" disabled >Select a brand</option>
            <!-- Add brands dynamically -->
            <% brands.forEach(function(brand) { %>
              <option value="<%= brand._id %>" <%= product && product.brand == brand.id ? 'selected' : '' %> ><%= brand.name %></option>
            <% }); %>
          </select>
          <p id="brandError" class="text-red-500 text-sm" aria-live="assertive"></p>
        </div>
        <div class="w-1/2">
          <label for="category" class="block">Category</label>
          <select id="category" name="category" class="border border-gray-300 p-2 w-full" required>
            <option value="" disabled >Select a category</option>
            <!-- Add categories dynamically -->
            <% categories.forEach(function(category) { %>
              <option value="<%= category._id %>" <%= product && product.category == category.id ? 'selected' : '' %> ><%= category.name %></option>
            <% }); %>
          </select>
          <p id="categoryError" class="text-red-500 text-sm" aria-live="assertive"></p>
        </div>
      </div>
  
      <!-- Model and Type -->
      <div class="flex space-x-4">
        <div class="w-1/2">
          <label for="model" class="block">Model Name</label>
          <input type="text" id="model_name" name="model_name" value="<%= product.model_name %>" class="border border-gray-300 p-2 w-full" required />
          <p id="modelError" class="text-red-500 text-sm" aria-live="assertive"></p>
        </div>
        <div class="w-1/2">
          <label for="type" class="block">Type</label>
          <input type="text" id="product_type" name="product_type" value="<%= product.product_type %>" class="border border-gray-300 p-2 w-full" required />
          <p id="typeError" class="text-red-500 text-sm" aria-live="assertive"></p>
        </div>
      </div>
  
      <!-- Color and Connectivity -->
      <div class="flex space-x-4">
        <div class="w-1/2">
          <label for="color" class="block">Color</label>
          <input type="text" id="color" name="color" value="<%= product.color %>" class="border border-gray-300 p-2 w-full" required />
          <p id="colorError" class="text-red-500 text-sm" aria-live="assertive"></p>
        </div>
        <div class="w-1/2">
          <label for="connectivity" class="block">Connectivity</label>
          <input type="text" id="connectivity" name="connectivity" value="<%= product.connectivity %>" class="border border-gray-300 p-2 w-full" required />
          <p id="connectivityError" class="text-red-500 text-sm" aria-live="assertive"></p>
        </div>
      </div>
  
      <!-- Product Images -->
<div>
    <label for="images" class="block">Product Images</label>
    <input type="file" id="images" multiple accept="image/*" class="border border-blue-500 p-3 w-1/3 cursor-pointer hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500" />
    <p id="imageError" class="text-red-500 text-sm" aria-live="assertive"></p>
  
    <!-- Preview Area for Existing and Cropped Images -->
    <div id="imagePreview" class="grid grid-cols-3 gap-4 mt-4">
      <% if (product.images && product.images.length > 0) { %>
        <% product.images.forEach(function(image, index) { %>
          <div class="relative existing-image" data-index="<%= index %>" data-id="<%= image %>">
            <img src="/uploads/<%= image %>" alt="Product Image" class="w-full h-auto rounded">
            <button class="absolute top-0 right-0 bg-red-600 text-white rounded px-2 py-1 text-xs remove-existing">Remove</button>
          </div>
        <% }) %>
      <% } %>
    </div>
  </div>
  


 
  
      
      <!-- Submit Button -->
      <button type="submit" class="absolute right-8 px-4 py-2 bg-blue-800 text-white text-sm tracking-wider font-medium rounded hover:bg-blue-900">Save Changes</button>
    </form>




         <!-- Cropper Modal -->
<div id="cropperModal" class="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-75 hidden z-50">
  <div class="bg-white p-4 rounded-lg w-[600px] h-[530px]">
    <h2 class="text-lg font-semibold mb-4">Crop Image</h2>
    <!-- Cropper container -->
    <div class="w-full h-[400px] flex justify-center items-center overflow-hidden">
      <img id="cropperImage" src="" alt="To be cropped" class="max-w-full max-h-full block">
    </div>
    <!-- Modal buttons -->
    <div class="flex justify-end space-x-4 mt-4">
      <button id="cancelCrop" type="button" class="px-4 py-2 bg-gray-300 rounded-lg hover:bg-gray-400">Cancel</button>
      <button id="cropImage" type="button" class="px-6 py-2 bg-black text-white rounded-lg hover:bg-gray-900">Crop</button>
    </div>
  </div>
</div>
  </div>


 <!-- JavaScript for handling form submission -->
<script>

// Disable Enter key for input fields
document.querySelectorAll('input').forEach(input => {
  input.addEventListener('keydown', function (event) {
    if (event.key === 'Enter') {
      event.preventDefault();
    }
  });
});


const product = <%- JSON.stringify(product) %>;



let sidebarOn = true;
let selectedFile;
let cropper;
let croppedImages = []; // Store the cropped images' blobs
let removedImages = []; // Track removed existing images
const cropperModal = document.getElementById('cropperModal');
const imagePreview = document.getElementById('imagePreview');
const cropperImage = document.getElementById('cropperImage');
const imagesInput = document.getElementById('images');
const imageError = document.getElementById("imageError");

// Handle removing existing images
imagePreview.addEventListener('click', function(e) {
  if (e.target.classList.contains('remove-existing')) {
    const imageElement = e.target.closest('.existing-image');
    const imageId = imageElement.dataset.id;
    imagePreview.removeChild(imageElement);
        
    // Add the image id to the removedImages array
    removedImages.push(imageId);
  }
});

// Handle cropping of new images
imagesInput.addEventListener('change', (event) => {
  const files = event.target.files;
  if (files && files.length > 0) {
    selectedFile = files[0];
    const reader = new FileReader();

    reader.onload = function (e) {
      cropperImage.src = e.target.result;
      cropperModal.classList.remove('hidden');
      if (cropper) {
        cropper.destroy();
      }
      cropper = new Cropper(cropperImage, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 1,
      });
    };
    reader.readAsDataURL(selectedFile);
  }
});


// Cancel button - close the modal
document.getElementById('cancelCrop').addEventListener('click', () => {
      cropperModal.classList.add('hidden');
      imagesInput.value = ''; // Clear selected files
    });



document.getElementById('cropImage').addEventListener('click', () => {
  const canvas = cropper.getCroppedCanvas();
  canvas.toBlob((blob) => {
    const croppedFile = new File([blob], `cropped-${Date.now()}.png`, { type: 'image/png' });

    // Store the cropped image in croppedImages array
    croppedImages.push(croppedFile);

    // Create the preview element
    const previewContainer = document.createElement('div');
    previewContainer.classList.add('relative');

    const img = document.createElement('img');
    img.src = URL.createObjectURL(croppedFile);
    img.classList.add('w-full', 'h-auto', 'rounded');

    const removeButton = document.createElement('button');
    removeButton.textContent = 'Remove';
    removeButton.classList.add('absolute', 'top-0', 'right-0', 'bg-red-600', 'text-white', 'rounded', 'px-2', 'py-1', 'text-xs');
    removeButton.addEventListener('click', (e) => {
      e.preventDefault();
      imagePreview.removeChild(previewContainer); // Remove preview
      const index = croppedImages.indexOf(croppedFile);
      if (index > -1) {
        croppedImages.splice(index, 1); // Remove from array
      }
    });

    previewContainer.appendChild(img);
    previewContainer.appendChild(removeButton);
    imagePreview.appendChild(previewContainer);

    cropperModal.classList.add('hidden'); // Close modal
  }, 'image/png');
});

// Form submission 
document.getElementById("editProductForm").addEventListener("submit", async function (e) {
  e.preventDefault();

  let isValid = true;

  // Existing validation logic here...
   // Product Name validation
   const productName = document.getElementById("name").value;
      const productNameError = document.getElementById("productNameError");
      if (productName.length < 3 || productName.length > 50 || /[^a-zA-Z0-9 ]/.test(productName)) {
        productNameError.textContent = "Product name must be between 3 and 50 characters and contain no special characters.";
        isValid = false;
      } else {
        productNameError.textContent = "";
      }
  
      // Description validation
      const description = document.getElementById("description").value;
      const descriptionError = document.getElementById("descriptionError");
      if (description.length < 10 || description.length > 1000) {
        descriptionError.textContent = "Product description must be between 10 and 1000 characters.";
        isValid = false;
      } else {
        descriptionError.textContent = "";
      }
  

       // Category validation
       const category = document.getElementById("category").value;
        const categoryError = document.getElementById("categoryError");
        if (!category) {
            categoryError.textContent = "Please select a category.";
            isValid = false;
        } else {
            categoryError.textContent = "";
        }

        // Price validation
        const price = parseFloat(document.getElementById("price").value);
        const priceError = document.getElementById("priceError");
        if (isNaN(price) || price <= 0) {
            priceError.textContent = "Product price must be greater than zero.";
            isValid = false;
        } else {
            priceError.textContent = "";
        }

        // Stock validation
        const stock = parseInt(document.getElementById("stock").value);
        const stockError = document.getElementById("stockError");
        if (isNaN(stock) || stock < 0) {
            stockError.textContent = "Stock must be zero or greater.";
            isValid = false;
        } else {
            stockError.textContent = "";
        }

        // Discount validation
        const discount = parseInt(document.getElementById("discount").value);
        const discountError = document.getElementById("discountError");
        if (isNaN(discount) || discount < 0 || discount > 100) {
            discountError.textContent = "Discount must be between 0 and 100.";
            isValid = false;
        } else {
            discountError.textContent = "";
        }

        // Brand validation
        const brand = document.getElementById("brand").value;
        const brandError = document.getElementById("brandError");
        if (brand.length < 2 || brand.length > 30 || /[^a-zA-Z0-9 ]/.test(brand)) {
            brandError.textContent = "Brand name must be between 2 and 30 characters and contain no special characters.";
            isValid = false;
        } else {
            brandError.textContent = "";
        }

        // Warranty validation
        const warranty = parseInt(document.getElementById("warranty").value);
        const warrantyError = document.getElementById("warrantyError");
        if (isNaN(warranty) || warranty < 1 || warranty > 5) {
            warrantyError.textContent = "Warranty must be between 1 and 5 years.";
            isValid = false;
        } else {
            warrantyError.textContent = "";
        }

        // Model Name validation
        const model = document.getElementById("model_name").value;
        const modelError = document.getElementById("modelError");
        if (model.length < 3 || model.length > 50) {
            modelError.textContent = "Model name must be between 3 and 50 characters.";
            isValid = false;
        } else {
            modelError.textContent = "";
        }

        // Type validation
        const type = document.getElementById("product_type").value;
        const typeError = document.getElementById("typeError");
        if (type.length < 3 || type.length > 50) {
            typeError.textContent = "Type must be between 3 and 50 characters.";
            isValid = false;
        } else {
            typeError.textContent = "";
        }

        // Color validation
        const color = document.getElementById("color").value;
        const colorError = document.getElementById("colorError");
        if (color.length < 3 || color.length > 20) {
            colorError.textContent = "Color must be between 3 and 20 characters.";
            isValid = false;
        } else {
            colorError.textContent = "";
        }

        // Connectivity validation
        const connectivity = document.getElementById("connectivity").value;
        const connectivityError = document.getElementById("connectivityError");
        if (connectivity.length < 5 || connectivity.length > 50) {
            connectivityError.textContent = "Connectivity must be between 5 and 50 characters.";
            isValid = false;
        } else {
            connectivityError.textContent = "";
        }
      
  if (croppedImages.length < 3 && (product.images.length - removedImages.length + croppedImages.length) < 3) {
    imageError.textContent = "Please select at least 3 images.";
    isValid = false;
  } else {
    imageError.textContent = "";
  }

  if (!isValid) {
    return;
  }

  const formData = new FormData(this);

  // Append the removed images array
  formData.append('removedImages', JSON.stringify(removedImages));

  // Append all the cropped images (newly added)
  croppedImages.forEach((image, index) => {
    formData.append('newImages', image);
  });

 
  try {
    const response = await fetch(`/admin/updateproduct/<%=product.id%>`, {
      method: 'POST',
      body: formData,
    });
    
    const result = await response.json();
    console.log(response.ok)
    if (response.ok) {
      Swal.fire({
        icon: 'success',
        title: 'Successfully Updated!',
        text: 'Product successfully updated.',
        background: '#F8F9FA',
        color: '#333',
        timer: 2000,
        showConfirmButton: false
      });
      setTimeout(() => {
        window.location.href = '/admin/products';
      }, 2000);
    } 
    
    if (!response.ok) {
        Swal.fire({
        icon: 'error',
        title: 'Update Failed',
        text: result.message,
        background: '#F8F9FA',
        color: '#333',
        timer: 3000,
        showConfirmButton: false
    });

    setTimeout(() => {
        window.location.href = '/admin/products';
      }, 3000);

      console.error(result.message);
    }
  } catch (error) {
    console.error(error);
  }
});

  
</script>

 

</div>
