<div>
    <!-- Include the sidebar partial -->
    <%- include('partials/sidebar') %>
  
    <!-- Navbar -->
    <div class="fixed top-0 left-0 right-0 z-10 flex items-center justify-between p-8 h-20 shadow-md ml-64 bg-gray-100">
      <div>
        <h2 class="text-lg font-semibold">Order Management</h2>
      </div>
      <div>
        <form action="#" method="GET">
          <input type="text" name="search" placeholder="Search orders..." class="p-2 w-[500px] h-10 rounded bg-gray-200 focus:ring-2 focus:ring-blue-500 focus:outline-none">
        </form>
      </div>
    </div>
  
    <!-- Main Content -->
    <div class="ml-64 pt-28 pb-16">
        <% orders.forEach(order => { %> 
            <div class="py-2 px-6">
                <!-- Order Card -->
                <div class="bg-white shadow rounded-md p-4">
                    <!-- Order Header -->
                    <div class="flex justify-between items-center bg-gray-200 p-4 rounded">
                    <div class="text-sm">
                        <span class="font-semibold">Order ID:</span> <%= order._id %>
                    </div>
                    <div class="text-sm">
                        <span class="font-semibold">Customer Name:</span> <%= order.customer.customerName %>
                    </div>
                    <div class="text-sm">
                        <span class="font-semibold">Order Date:</span> <%= order.formattedDate %>
                    </div>
                    <div class="text-sm">
                        <span class="font-semibold">Total Amount:</span> <span>&#8377;</span><%= order.payment.finalAmount%>.00
                    </div>
                    <button class="text-sm font-semibold text-blue-600 hover:text-blue-800">
                        View Order Details
                    </button>
                    </div>
        
                    <!-- Order Products -->
                    <div class="p-4">
                   
                        <% order.items.forEach(item => { %> 
                            <div class="flex items-center border-b border-gray-300 py-4">
                                <!-- Product Image -->
                                <div class="w-12 h-12 bg-gray-200 rounded-md flex items-center justify-center text-sm font-medium text-gray-500">
                                    <img src="/uploads/<%= item.productId.images[0] %>" alt="<%= item.productName %>">
                                </div>
                                
                                <!-- Product Info -->
                                <div class="ml-4 flex-grow">
                                    <p class="text-sm font-medium text-gray-800"><%= item.productName %></p>
                                </div>
                                
                                <!-- Status Badge -->
                                <div class="mr-4 w-42 flex items-center justify-center">
                                    <span id="item-status-<%=item._id%>" class="bg-yellow-100 text-yellow-600 px-2 py-1 rounded text-xs font-medium">
                                        <%= item.status %>
                                    </span>
                                </div>
                                
                                <!-- Status Dropdown -->
                                <div class="mr-4">
                                    <select class="p-2 border rounded text-sm cursor-pointer" id="status_<%= item._id %>" data-item-id="<%= item._id %>" data-current-status="<%= item.status %>"
                                        <%= item.status === 'Cancelled' ? 'disabled' : '' %>
                                        <%= item.status === 'Return Request Pending' ? 'disabled' : '' %>
                                        <%= item.status === 'Retrun Request Rejected' ? 'disabled' : '' %>
                                        <%= item.status === 'Returned' ? 'disabled' : '' %>>
                                        <!-- Status options will be dynamically populated -->
                                    </select>
                                </div>
                                
                                <!-- Order Date -->
                                <div id="statusUpdatedAt-<%=item._id%>" class="text-sm text-gray-600 w-32 text-center <%= item.status !== 'Return Request Pending' ? 'mr-32' : '' %>">
                                    <%= item.statusUpdatedAt ? item.statusUpdatedAt.toISOString().split('T')[0] : 'N/A' %>
                                </div>
                        
                                <!-- Return Button -->
                                
                                <button 
                                    class="bg-red-500 text-white px-3 py-2 rounded text-sm hover:bg-red-600 return-requested-button <%=item.status !== 'Return Request Pending' ? 'hidden' : '' %>"
                                    data-item-id="<%= item._id %>" 
                                    id="returnBtn-<%= item._id %>">
                                    Return requested
                                </button>

                            </div>
                        <% }) %>
                    
        
                    </div>
                </div>
        </div>
        <% }) %>


        <div class="mt-6 flex justify-center items-center px-8">
            <!-- Previous Button -->
            <!-- <% if (currentPage > 1) { %>
              <a href="?page=<%= currentPage - 1 %>&limit=<%= limit %>" class="px-4 py-2 bg-gray-300 text-sm rounded hover:bg-gray-400">Previous</a>
            <% } else { %>
              <span class="px-4 py-2 bg-gray-300 text-sm rounded opacity-50">Previous</span>
            <% } %> -->
          
            <!-- Page Numbers -->
            <div class="flex space-x-2">
              <% for (let i = 1; i <= totalPages; i++) { %>
                <% if (i === currentPage) { %>
                  <span class="px-4 py-2 bg-blue-500 text-white text-sm rounded"><%= i %></span>
                <% } else { %>
                  <a href="?page=<%= i %>&limit=<%= limit %>" class="px-4 py-2 bg-gray-300 text-sm rounded hover:bg-gray-400"><%= i %></a>
                <% } %>
              <% } %>
            </div>
          
            <!-- Next Button -->
            <!-- <% if (currentPage < totalPages) { %>
              <a href="?page=<%= currentPage + 1 %>&limit=<%= limit %>" class="px-4 py-2 bg-gray-300 text-sm rounded hover:bg-gray-400">Next</a>
            <% } else { %>
              <span class="px-4 py-2 bg-gray-300 text-sm rounded opacity-50">Next</span>
            <% } %> -->
          </div>
      

    </div>
  </div>


  <div id="returnRequestModal" class="hidden fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center">
    <div class="bg-white p-6 rounded-lg shadow-lg w-96">
        <h3 class="text-lg font-bold mb-4">Handle Return Request</h3>
        <p id="productName" class="text-sm font-medium text-gray-800 mb-2">Product: </p>
        <p id="returnReason" class="text-sm text-gray-600 mb-4">Reason: </p>
        <div class="flex justify-end gap-2">
            <button id="rejectReturn" class="bg-gray-300 text-black px-4 py-2 rounded hover:bg-gray-400">Reject</button>
            <button id="acceptReturn" class="bg-black text-white px-4 py-2 rounded hover:bg-gray-900">Accept</button>
        </div>
    </div>
</div>



<!-- Order Details Modal -->
<div id="orderDetailsModal" class="fixed inset-0 flex items-center z-50 justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-white w-3/4 max-w-4xl rounded-lg shadow-lg">
        <div class="flex justify-between items-center p-4 border-b">
            <h3 class="text-lg font-semibold">Order Details</h3>
            <button id="closeModalButton" class="text-gray-500 hover:text-gray-700">
                &times;
            </button>
        </div>
        <div class="p-4 mb-2 max-h-[90vh] overflow-y-auto" id="modalContent">
            <!-- Order details will be dynamically populated here -->
        </div>
    </div>
</div>





  <script>


document.querySelectorAll('.pagination-link').forEach(link => {
    link.addEventListener('click', async (event) => {
      event.preventDefault();
      const url = event.target.href;

      try {
        const response = await fetch(url);
        const html = await response.text();

        // Replace the table and pagination controls with the new content
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const newTable = doc.querySelector('table');
        const newPagination = doc.querySelector('.pagination-controls');

        document.querySelector('table').innerHTML = newTable.innerHTML;
        document.querySelector('.pagination-controls').innerHTML = newPagination.innerHTML;
      } catch (error) {
        console.error('Error fetching new page:', error);
      }
    });
  });


// ------------------- Change Order Status --------------------


    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('select').forEach(selectElement => {
            const currentStatus = selectElement.dataset.currentStatus;
            const itemId = selectElement.dataset.itemId;

            // Define the valid status flow
            const statusOptions = ['Pending', 'Confirmed', 'Processing', 'Shipped', 'Out for Delivery', 'Delivered'];

            // Function to generate the options with the disabled logic
            const generateOptions = (currentStatus) => {
                return statusOptions.map(status => {
                    let disabled = false;

                    // Disable the current status
                    if (status === currentStatus) {
                        disabled = true;
                    }

                    // Disable any status before the current one in the sequence
                    const currentStatusIndex = statusOptions.indexOf(currentStatus);
                    const statusIndex = statusOptions.indexOf(status);
                    if (statusIndex < currentStatusIndex) {
                        disabled = true;
                    }

                    return `<option value="${status}" ${disabled ? 'disabled' : ''} ${status === currentStatus ? 'selected' : ''}>${status}</option>`;
                }).join('');
            };

            // Initially populate the options
            selectElement.innerHTML = generateOptions(currentStatus);

            // Listen for changes and update the options
            selectElement.addEventListener('change', async function(event) {
                const newStatus = event.target.value;
                console.log(itemId, newStatus);

                // Send an AJAX request to update the status
                try {
                    const response = await fetch('/admin/update-order-status', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ itemId, newStatus })
                    });

                    const result = await response.json();
                    if (response.ok) {

                        Toastify({
                        text: result.message,
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "left", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        onClick: function(){} // Callback after click
                        }).showToast();

                        const statusElement = document.getElementById(`item-status-${result.itemId}`);
                        statusElement.innerText = result.newStatus;
                        
                        // After updating, disable all previous options and enable the next options
                        selectElement.innerHTML = generateOptions(newStatus);
                    } else {
                        Toastify({
                        text: result.message,
                        duration: 3000,
                        gravity: "top", // `top` or `bottom`
                        position: "right", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        onClick: function(){} // Callback after click
                        }).showToast();
                    }
                } catch (error) {
                    console.error('Error updating status:', error);
                    Toastify({
                        text: 'An error occurred while updating the status',
                        duration: 3000,
                        gravity: "top", // `top` or `bottom`
                        position: "right", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        onClick: function(){} // Callback after click
                        }).showToast();
                    
                }
            });
        });
    });


// ---------------------- Get Return Details -------------------------

    document.addEventListener('DOMContentLoaded', () => {
    const returnModal = document.getElementById('returnRequestModal');
    const productNameElement = document.getElementById('productName');
    const returnReasonElement = document.getElementById('returnReason');

    document.querySelectorAll('.return-requested-button').forEach(button => {
        button.addEventListener('click', async () => {
            const itemId = button.dataset.itemId;

            try {
                const response = await fetch(`/admin/get-return-details/${itemId}`);
                const result = await response.json();

                if (response.ok) {
                    // Populate modal with product and reason
                    productNameElement.innerText = `Product: ${result.productName}`;
                    returnReasonElement.innerText = `Reason: ${result.reason}`;
                    returnModal.dataset.itemId = itemId; // Store the item ID for later use
                    returnModal.classList.remove('hidden');
                } else {
                    Toastify({
                        text: result.message,
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "left", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        }).showToast();
                }
            } catch (error) {
                console.error('Error fetching return details:', error);
                Toastify({
                        text: 'Oops! Some thing went wrong, Please try againg later',
                        duration: 3000,
                        gravity: "top", // `top` or `bottom`
                        position: "right", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        }).showToast();
            }
        });
    });


// ------------------------- Accept Return Request --------------------------


    // Handle Accept Return
    document.getElementById('acceptReturn').addEventListener('click', async () => {
        const itemId = returnModal.dataset.itemId;
        try {
            const response = await fetch('/admin/accept-return', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ itemId })
            });

            const result = await response.json();
            if (response.ok) {
                // Update status in UI
                document.getElementById(`item-status-${itemId}`).innerText = 'Returned';
                document.getElementById(`returnBtn-${itemId}`).classList.add('hidden');
                document.getElementById(`statusUpdatedAt-${itemId}`).classList.add('mr-32');
                returnModal.classList.add('hidden');
                
                Toastify({
                        text: result.message,
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "left", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        }).showToast();
            } else {
                Toastify({
                        text: result.message,
                        duration: 3000,
                        gravity: "top", // `top` or `bottom`
                        position: "right", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        }).showToast();
            }
        } catch (error) {
            console.error('Error accepting return:', error);
            Toastify({
                        text: 'Oops! Some thing went wrong, Please try againg later',
                        duration: 3000,
                        gravity: "top", // `top` or `bottom`
                        position: "right", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        }).showToast();
        }
    });


// ------------------------ Reject Rrturn Request -------------------------


    
    document.getElementById('rejectReturn').addEventListener('click', async () => {
        const itemId = returnModal.dataset.itemId;
        try {
            const response = await fetch('/admin/reject-return', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ itemId })
            });

            const result = await response.json();
            if (response.ok) {
                // Update status in UI
                document.getElementById(`item-status-${itemId}`).innerText = 'Return Request Rejected';
                document.getElementById(`returnBtn-${itemId}`).classList.add('hidden');
                document.getElementById(`statusUpdatedAt-${itemId}`).classList.add('mr-32');
                returnModal.classList.add('hidden');
                
                Toastify({
                        text: result.message,
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "left", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        }).showToast();
            } else {
                Toastify({
                        text: result.message,
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "left", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        }).showToast();
            }
        } catch (error) {
            console.error('Error rejecting return:', error);
            Toastify({
                        text: 'Oops! Some thing went wrong, Please try againg later',
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "left", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        }).showToast();
        }
    });

    // Close modal when clicking outside or on ESC key
    window.addEventListener('click', event => {
        if (event.target === returnModal) {
            returnModal.classList.add('hidden');
        }
    });

    document.addEventListener('keydown', event => {
        if (event.key === 'Escape') {
            returnModal.classList.add('hidden');
        }
    });
});


// -------------------- Get Order Details -----------------------


document.addEventListener('DOMContentLoaded', () => {
    // Modal elements
    const modal = document.getElementById('orderDetailsModal');
    const closeModalButton = document.getElementById('closeModalButton');
    const modalContent = document.getElementById('modalContent');

    // Add event listener to all "View Order Details" buttons
    document.querySelectorAll('.text-blue-600').forEach(button => {
        button.addEventListener('click', async function () {
            const orderId = this.closest('.flex').querySelector('.text-sm').innerText.split(': ')[1];

            // Fetch order details dynamically
            try {
                const response = await fetch(`/admin/get-order-details/${orderId}`);
                const result = await response.json();

                if (response.ok) {
                    // Populate modal with order details
                    modalContent.innerHTML = `
                        <div class="p-4">
                            <!-- Order Header -->
                            <div class="flex justify-between items-start mb-6">
                                <div>
                                    <h3 class="text-lg font-semibold">Order ID: ${result.orderId}</h3>
                                    <p class="text-sm text-gray-500">Date: ${result.date}</p>
                                </div>
                            </div>

                            <!-- Customer and Shipping Info -->
                            <div class="grid grid-cols-2 gap-6 mb-6">
                                <div>
                                    <h4 class="text-base font-semibold mb-2">Customer Information</h4>
                                    <p><strong>Name:</strong> ${result.customerName}</p>
                                    <p><strong>Email:</strong> ${result.customerEmail}</p>
                                </div>
                                <div>
                                    <h4 class="text-base font-semibold mb-2">Shipping Address</h4>
                                    <p>${result.shippingAddress}</p>
                                    <p>Phone Number : ${result.phone}</p>
                                </div>
                            </div>

                            <!-- Order Summary -->
                            <div class="mb-6">
                                <h4 class="text-base font-semibold mb-2">Order Summary</h4>
                                <table class="w-full text-sm">
                                    <tr>
                                        <td class="py-1">Price (${result.items.length} items)</td>
                                        <td class="py-1 text-right">&#8377;${result.totalPrice}</td>
                                    </tr>
                                    <tr>
                                        <td class="py-1">Discount</td>
                                        <td class="py-1 text-right text-green-500">- &#8377;${result.discount}</td>
                                    </tr>
                                    <tr>
                                        <td class="py-1">Offer Discount</td>
                                        <td class="py-1 text-right text-red-500">- &#8377;${result.offer}</td>
                                    </tr>
                                    <tr>
                                        <td class="py-1">Delivery Charge</td>
                                        <td class="py-1 text-right text-gray-500">0</td>
                                    </tr>
                                    <tr>
                                        <td class="py-1 font-semibold">Total Amount</td>
                                        <td class="py-1 text-right font-semibold">&#8377;${result.finalAmount}</td>
                                    </tr>
                                    <tr>
                                        <td class="py-1">Payment Method</td>
                                        <td class="py-1 text-right">${result.paymentMethod}</td>
                                    </tr>
                                </table>
                            </div>

                            <!-- Items Purchased -->
                            <div>
                                <h4 class="text-base font-semibold mb-2">Items Purchased</h4>
                                <div class="divide-y">
                                    ${result.items
                                        .map(
                                            item => `
                                                <div class="flex justify-between items-center py-3">
                                                    <div class="flex items-start">
                                                        <img src="/uploads/${item.image}" alt="${item.productName}" class="w-16 h-16 mr-4 object-cover rounded-md">
                                                        <div>
                                                            <h5 class="font-medium">${item.productName}</h5>
                                                            <p class="text-sm text-gray-500">Quantity: ${item.quantity}</p>
                                                        </div>
                                                    </div>
                                                    <div class="text-right">
                                                        <p class="font-semibold">&#8377;${item.finalAmount}</p>
                                                        <p class="${
                                                            item.status === "Cancelled"
                                                                ? "text-red-500"
                                                                : "text-green-500"
                                                        } text-sm">${item.status}</p>
                                                    </div>
                                                </div>
                                            `
                                        )
                                        .join('')}
                                </div>
                            </div>
                        </div>
                    `;
                    modal.classList.remove('hidden');
                } else {
                    alert(result.message || 'Failed to fetch order details.');
                }
            } catch (error) {
                console.error('Error fetching order details:', error);
                alert('An error occurred while fetching order details.');
            }
        });
    });

    // Close modal on button click
    closeModalButton.addEventListener('click', () => {
        modal.classList.add('hidden');
    });

    // Close modal on clicking outside the modal content
    modal.addEventListener('click', event => {
        if (event.target === modal) {
            modal.classList.add('hidden');
        }
    });
});



</script>

  