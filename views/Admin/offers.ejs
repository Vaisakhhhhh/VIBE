<div>
  <!-- Include Sidebar -->
  <%- include('partials/sidebar') %>

  <!-- Main Content -->
     <!-- Navbar  -->
     <div class="fixed top-0 left-0 right-0 z-10 flex items-center justify-between p-8 h-20 shadow-md ml-64 bg-gray-100">
      <div>
          <h2 class="text-lg font-semibold">Offer Management</h2>
      </div>
      <div>
          <form action="#" method="GET">
              <input type="text" name="search" placeholder="Search" class="p-2 w-[500px] h-10 rounded bg-gray-200">
          </form>
      </div>
    </div>

  <!-- Add Offer Section -->
  <div class="ml-64 pt-24 pb-16">
    <button
      id="add-category-btn"
      class="absolute right-8 top-24 px-4 py-2 bg-blue-800 text-white text-sm tracking-wider font-medium rounded hover:bg-blue-900"
    >
      Add A New Offer
    </button>



    <div class="font-sans overflow-x-auto ml-8 mr-8 mt-12">
      <table class="min-w-full bg-white">
        <thead class="bg-gray-200 whitespace-nowrap">
          <tr>
              <th class="p-4 text-left text-xs font-bold text-gray-800 w-[5%]">Sl</th>
            <th class="p-4 text-left text-xs font-bold text-gray-800 w-[10%]">
              Type
            </th>
            <th class="p-4 text-left text-xs font-bold text-gray-800 w-[20%]">
              Title
            </th>
            <th class="p-4 text-left text-xs font-bold text-gray-800 w-[20%]">
              Applicable
            </th>
            <th class="p-4 text-left text-xs font-bold text-gray-800 w-[10%]">
              Discount
            </th>
            <th class="p-4  text-left text-xs font-bold text-gray-800 w-[10%]">
              Start Date
            </th>
            <th class="p-4 text-left text-xs font-bold text-gray-800 w-[10%]">
              End Date
            </th>
            <th class="p-4 text-left text-xs font-bold text-gray-800 w-[10%]">
              Status
            </th>
            <th class="p-4 text-left text-xs font-bold text-gray-800 w-[20%] text-center">
              Actions
            </th>
          </tr>
        </thead>
  
        <tbody class="whitespace-nowrap">
          
          <% offers.forEach((offer, index) => { %>

            <tr class="hover:bg-gray-50">
                <td class="p-4  text-[15px] text-gray-800 font-semibold">
                  <%= ((currentPage - 1) * limit) + index + 1 %>
                 
                </td>
                <td class="p-4 text-[15px] text-gray-800 font-semibold ">
                  <%= offer.offerType %>
                </td>
                <td class="p-4 text-[15px] text-gray-800 font-semibold ">
                  <%= offer.title.split(' ').slice(0, 3).join(' ') + (offer.title.split(' ').length > 3 ? '...' : '') %>

                </td>
                <td class="p-4 text-[15px] text-gray-800 font-semibold ">
                  <%= offer.offerType === "Product" ? offer.applicableProduct.name : offer.applicableCategory.name %>
                </td>
                <td class="p-4 text-[15px] text-gray-800 font-semibold ">
                  <%= offer.discountPercentage %>
                </td>
                <td class="p-4 text-[15px] text-gray-800 font-semibold ">
                  <%= offer.startDate ? offer.startDate.toISOString().split('T')[0] : 'N/A' %>
                </td>
                <td class="p-4 text-[15px] text-gray-800 font-semibold ">
                  <%= offer.endDate ? offer.endDate.toISOString().split('T')[0] : 'N/A' %>
                </td>
                
                <td class="p-4 text-[15px] text-gray-800 font-semibold ">
                 <%= offer.isActive ? 'Active' : 'Inactive' %>
                </td>
                <td class="p-4 w-[30%]">
                  <button type="button"
                    class="block-unblock-btn w-[80px] py-2 rounded-lg text-white text-sm tracking-wider font-medium border border-current outline-none bg-<%= offer.isActive ? 'orange-700' : 'green-700' %> hover:bg-<%= offer.isActive ? 'orange-800' : 'green-800' %> active:bg-<%= offer.isActive ? 'orange-700' : 'green-700' %>"
                    data-offer-id="<%= offer._id %>"
                    data-blocked="<%= offer.isActive %>" >
                    <%= offer.isActive ? 'Block' : 'Unblock' %>
                  </button>

                  <!-- Edit Button -->
                  <button type="button"
                    class="edit-offer-btn w-[80px] py-2 text-white rounded-lg text-sm tracking-wider font-medium border border-current outline-none hover:bg-gray-600 bg-gray-500"
                    data-id="<%= offer._id %>"
                    data-title="<%= offer.title %>"
                    data-discount="<%= offer.discountPercentage %>"
                    data-offer-type="<%= offer.offerType %>"
                    data-applicable-product="<%= offer.applicableProduct ? offer.applicableProduct._id : '' %>"
                    data-applicable-category="<%= offer.applicableCategory ? offer.applicableCategory._id : '' %>"
                    data-start-date="<%= offer.startDate ? offer.startDate.toISOString().split('T')[0] : '' %>"
                    data-end-date="<%= offer.endDate ? offer.endDate.toISOString().split('T')[0] : '' %>"
                    data-is-active="<%= offer.isActive ? 'true' : 'false' %>"
                >
                  Edit
                </button>
                
                    <button type="button"
                    class="delete-offer-btn w-[80px] py-2  text-white rounded-lg text-sm tracking-wider font-medium border border-current outline-none hover:bg-red-700 bg-red-600"
                    data-delete-offer-id="<%= offer._id %>">
                    
                    Delete
                    </button>
                </td>
                
              </tr>

       <% }) %>
        </tbody>
      </table>
  
      <div class="mt-6 flex justify-center items-center px-8">
        <!-- Previous Button -->
        <!-- <% if (currentPage > 1) { %>
          <a href="?page=<%= currentPage - 1 %>&limit=<%= limit %>" class="px-4 py-2 bg-gray-300 text-sm rounded hover:bg-gray-400">Previous</a>
        <% } else { %>
          <span class="px-4 py-2 bg-gray-300 text-sm rounded opacity-50">Previous</span>
        <% } %> -->
      
        <!-- Page Numbers -->
        <div class="flex space-x-2">
          <% for (let i = 1; i <= totalPages; i++) { %>
            <% if (i === currentPage) { %>
              <span class="px-4 py-2 bg-blue-500 text-white text-sm rounded"><%= i %></span>
            <% } else { %>
              <a href="?page=<%= i %>&limit=<%= limit %>" class="px-4 py-2 bg-gray-300 text-sm rounded hover:bg-gray-400"><%= i %></a>
            <% } %>
          <% } %>
        </div>
      
        <!-- Next Button -->
        <!-- <% if (currentPage < totalPages) { %>
          <a href="?page=<%= currentPage + 1 %>&limit=<%= limit %>" class="px-4 py-2 bg-gray-300 text-sm rounded hover:bg-gray-400">Next</a>
        <% } else { %>
          <span class="px-4 py-2 bg-gray-300 text-sm rounded opacity-50">Next</span>
        <% } %> -->
      </div>
    
  
      
    </div>
  </div>



  
  
</div>

<!-- Add Offer Modal -->

<div id="add-offer-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
  <div class="bg-white rounded-lg shadow-lg w-1/3 px-8 py-4">
    <h2 class="text-xl font-semibold mb-4">Add New Offer</h2>
    <form id="add-offer-form">
      <!-- Offer Title -->
      <div class="mb-4">
        <label for="title" class="block font-medium mb-1">Offer Title</label>
        <input
          type="text"
          id="title"
          name="title"
          placeholder="e.g., 10% Off on Electronics"
          class="w-full p-2 border rounded"
        />
        <span id="title-error" class="text-red-500 text-sm hidden">This field is required.</span>
      </div>

      <!-- Discount Percentage -->
      <div class="mb-4">
        <label for="discount" class="block font-medium mb-1">Discount Percentage</label>
        <input
          type="number"
          id="discount"
          name="discount"
          placeholder="e.g., 10"
          class="w-full p-2 border rounded"
          
        />
        <span id="discount-error" class="text-red-500 text-sm hidden">This field is required.</span>
      </div>

      <!-- Offer Type -->
      <div class="mb-4">
        <label for="offerType" class="block font-medium mb-1">Offer Type</label>
        <select id="offerType" name="offerType" class="w-full p-2 border rounded">
          <option value="Product" selected>Product</option>
          <option value="Category">Category</option>
        </select>
        <span id="offerType-error" class="text-red-500 text-sm hidden">This field is required.</span>
      </div>

      <!-- Applicable Product -->
      <div id="productSelect" class="mb-4 relative">
        <label for="applicableProduct" class="block font-medium mb-1">Applicable Product</label>
        <div class="w-full p-2 border rounded bg-white">
          <div id="dropdownButton" class="cursor-pointer">Select Product</div>
          <div id="dropdownOptions" class="hidden absolute z-10 w-full border bg-white shadow max-h-48 overflow-y-auto">
            <% products.forEach(product => { %>
            <div class="p-2 hover:bg-blue-600 hover:text-white cursor-pointer" data-value="<%= product._id %>">
              <%= product.name %>
            </div>
            <% }) %>
          </div>
        </div>
        <input type="hidden" id="applicableProduct" name="applicableProduct" />
        <span id="applicableProduct-error" class="text-red-500 text-sm hidden">Please select a product.</span>
      </div>

      <!-- Applicable Category -->
      <div id="categorySelect" class="mb-4 hidden">
        <label for="applicableCategory" class="block font-medium mb-1">Applicable Category</label>
        <select id="applicableCategory" name="applicableCategory" class="w-full p-2 border rounded">
          <option value="">Select Category</option>
          <% categories.forEach(category => { %>
          <option value="<%=category._id%>"><%=category.name%></option>
          <% }) %>
        </select>
        <span id="applicableCategory-error" class="text-red-500 text-sm hidden">This field is required.</span>
      </div>

      <!-- Start and End Dates -->
      <div class="mb-4">
        <label for="startDate" class="block font-medium mb-1">Start Date</label>
        <input type="date" id="startDate" name="startDate" class="w-full p-2 border rounded" />
        <span id="startDate-error" class="text-red-500 text-sm hidden">This field is required.</span>
      </div>
      <div class="mb-4">
        <label for="endDate" class="block font-medium mb-1">End Date</label>
        <input type="date" id="endDate" name="endDate" class="w-full p-2 border rounded" />
        <span id="endDate-error" class="text-red-500 text-sm hidden">This field is required.</span>
      </div>

      <!-- Status -->
      <div class="mb-4 flex items-center">
        <input type="checkbox" id="status" name="status" class="mr-2" checked />
        <label for="status" class="font-medium">Active</label>
      </div>

      <!-- Action Buttons -->
      <div class="flex justify-end">
        <button
          type="button"
          id="cancel-btn"
          class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 mr-2"
        >
          Cancel
        </button>
        <button
          type="submit"
          class="px-4 py-2 bg-blue-800 text-white rounded hover:bg-blue-900"
        >
          Save
        </button>
      </div>
    </form>
  </div>
</div>



<!-- Edit Offer Modal -->
<div id="edit-offer-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
  <div class="bg-white rounded-lg shadow-lg w-1/3 px-8 py-4">
    <h2 class="text-xl font-semibold mb-4">Edit Offer</h2>
    <form id="edit-offer-form">
      <!-- Offer Title -->
      <div class="mb-4">
        <label for="edit-title" class="block font-medium mb-1">Offer Title</label>
        <input
          type="text"
          id="edit-title"
          name="title"
          class="w-full p-2 border rounded"
        />
        <span id="edit-title-error" class="text-red-500 text-sm hidden">This field is required.</span>
      </div>

      <!-- Discount Percentage -->
      <div class="mb-4">
        <label for="edit-discount" class="block font-medium mb-1">Discount Percentage</label>
        <input
          type="number"
          id="edit-discount"
          name="discount"
          class="w-full p-2 border rounded"
         
        />
        <span id="edit-discount-error" class="text-red-500 text-sm hidden">This field is required.</span>
      </div>

      <!-- Offer Type -->
      <div class="mb-4">
        <label for="edit-offerType" class="block font-medium mb-1">Offer Type</label>
        <select id="edit-offerType" name="offerType" class="w-full p-2 border rounded">
          <option value="Product">Product</option>
          <option value="Category">Category</option>
        </select>
        <span id="edit-offerType-error" class="text-red-500 text-sm hidden">This field is required.</span>
      </div>

      <!-- Applicable Product -->
      <div id="edit-productSelect" class="mb-4">
        <label for="edit-applicableProduct" class="block font-medium mb-1">Applicable Product</label>
        <select id="edit-applicableProduct" name="applicableProduct" class="w-full p-2 border rounded">
          <% products.forEach(product => { %>
          <option value="<%= product._id %>"><%= product.name %></option>
          <% }) %>
        </select>
      </div>

      <!-- Applicable Category -->
      <div id="edit-categorySelect" class="mb-4 hidden">
        <label for="edit-applicableCategory" class="block font-medium mb-1">Applicable Category</label>
        <select id="edit-applicableCategory" name="applicableCategory" class="w-full p-2 border rounded">
          <% categories.forEach(category => { %>
          <option value="<%= category._id %>"><%= category.name %></option>
          <% }) %>
        </select>
        <span id="edit-applicableCategory-error" class="text-red-500 text-sm hidden">This field is required.</span>
      </div>

      <!-- Start Date -->
      <div class="mb-4">
        <label for="edit-startDate" class="block font-medium mb-1">Start Date</label>
        <input type="date" id="edit-startDate" name="startDate" class="w-full p-2 border rounded" />
        <span id="edit-startDate-error" class="text-red-500 text-sm hidden">This field is required.</span>
      </div>

      <!-- End Date -->
      <div class="mb-4">
        <label for="edit-endDate" class="block font-medium mb-1">End Date</label>
        <input type="date" id="edit-endDate" name="endDate" class="w-full p-2 border rounded" />
        <span id="edit-endDate-error" class="text-red-500 text-sm hidden">This field is required.</span>
      </div>

      <!-- Status -->
      <div class="mb-4 flex items-center">
        <input type="checkbox" id="edit-status" name="status" class="mr-2" />
        <label for="edit-status" class="font-medium">Active</label>
      </div>

      <!-- Action Buttons -->
      <div class="flex justify-end">
        <button
          type="button"
          id="cancel-edit-btn"
          class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 mr-2"
        >
          Cancel
        </button>
        <button
          type="submit"
          class="px-4 py-2 bg-blue-800 text-white rounded hover:bg-blue-900"
        >
          Save Changes
        </button>
      </div>
    </form>
  </div>
</div>


<!-- Block & Unblock Modal -->
<div id="confirmation-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
  <div class="bg-white p-8 rounded-lg shadow-lg w-[400px]">
    <h2 class="text-xl font-semibold mb-4">Confirm Action</h2>
    <p id="modal-message" class="mb-6 text-gray-700">Are you sure you want to proceed?</p>
    <div class="flex justify-end space-x-4">
      <button id="status-cancel-btn" class="px-4 py-2 bg-gray-300 rounded-lg hover:bg-gray-400">Cancel</button>
      <button id="confirm-btn" class="px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-900">Confirm</button>
    </div>
  </div>
</div>


<!-- Delete Modal -->
<div id="delete-confirmation-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
  <div class="bg-white p-8 rounded-lg shadow-lg w-[400px]">
    <h2 class="text-xl font-semibold mb-4">Confirm Action</h2>
    <p class="mb-6 text-gray-700">Are you sure you want to delete this offer?</p>
    <div class="flex justify-end space-x-4">
      <button id="delete-cancel-btn" class="px-4 py-2 bg-gray-300 rounded-lg hover:bg-gray-400">Cancel</button>
      <button id="delete-confirm-btn" class="px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-900">Confirm</button>
    </div>
  </div>
</div>


<script>

document.querySelectorAll('.pagination-link').forEach(link => {
    link.addEventListener('click', async (event) => {
      event.preventDefault();
      const url = event.target.href;

      try {
        const response = await fetch(url);
        const html = await response.text();

        // Replace the table and pagination controls with the new content
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const newTable = doc.querySelector('table');
        const newPagination = doc.querySelector('.pagination-controls');

        document.querySelector('table').innerHTML = newTable.innerHTML;
        document.querySelector('.pagination-controls').innerHTML = newPagination.innerHTML;
      } catch (error) {
        console.error('Error fetching new page:', error);
      }
    });
  });


// ------------- Add Offer --------------


document.addEventListener('DOMContentLoaded', () => {
        const today = new Date().toISOString().split('T')[0]; // Get today's date in 'YYYY-MM-DD' format
        const startDateInput = document.getElementById('startDate');
        const expiryDateInput = document.getElementById('endDate');

        // Set the minimum date for both inputs
        startDateInput.min = today;
        expiryDateInput.min = today;

        // Optional: Update the expiryDateInput.min whenever startDateInput changes
        startDateInput.addEventListener('change', () => {
            expiryDateInput.min = startDateInput.value; // Ensure expiry date is after or equal to start date
        });
    });


document.addEventListener('DOMContentLoaded', () => {
  // References
  const addOfferBtn = document.getElementById('add-category-btn');
  const addOfferModal = document.getElementById('add-offer-modal');
  const cancelBtn = document.getElementById('cancel-btn');
  const offerType = document.getElementById('offerType');
  const productSelect = document.getElementById('productSelect');
  const categorySelect = document.getElementById('categorySelect');
  const dropdownButton = document.getElementById('dropdownButton');
  const dropdownOptions = document.getElementById('dropdownOptions');
  const hiddenInput = document.getElementById('applicableProduct');


  // Error Elements
  const titleError = document.getElementById('title-error');
  const discountError = document.getElementById('discount-error');
  const productError = document.getElementById('applicableProduct-error');
  const categoryError = document.getElementById('applicableCategory-error');
  const startDateError = document.getElementById('startDate-error');
  const endDateError = document.getElementById('endDate-error');

  // Set default offer type as 'Product'
  offerType.value = 'Product';
  updateVisibility();

  // Show modal
  addOfferBtn.addEventListener('click', () => {
    addOfferModal.classList.remove('hidden');
    updateVisibility();
  });

  // Hide modal
  cancelBtn.addEventListener('click', () => {
    addOfferModal.classList.add('hidden');
    resetForm();
  });

  function resetForm() {
    titleError.classList.add('hidden');
    discountError.classList.add('hidden');
    productError.classList.add('hidden');
    categoryError.classList.add('hidden');
    startDateError.classList.add('hidden');
    endDateError.classList.add('hidden');
  }

  // Toggle product/category fields based on offer type
  offerType.addEventListener('change', updateVisibility);

  function updateVisibility() {
    if (offerType.value === 'Product') {
      productSelect.classList.remove('hidden');
      categorySelect.classList.add('hidden');
    } else {
      categorySelect.classList.remove('hidden');
      productSelect.classList.add('hidden');
    }
  }

  // Dropdown logic
  dropdownButton.addEventListener('click', () => {
    dropdownOptions.classList.toggle('hidden');
  });

  dropdownOptions.addEventListener('click', (event) => {
    const option = event.target.closest('[data-value]');
    if (option) {
      hiddenInput.value = option.getAttribute('data-value');
      dropdownButton.textContent = option.textContent;
      dropdownOptions.classList.add('hidden');
    }
  });

  document.addEventListener('click', (event) => {
    if (!dropdownButton.contains(event.target) && !dropdownOptions.contains(event.target)) {
      dropdownOptions.classList.add('hidden');
    }
  });

  // Form submission
  const offerForm = document.getElementById('add-offer-form');
  offerForm.addEventListener('submit', async (event) => {
    event.preventDefault();
    let isValid = true;
    const formData = new FormData(offerForm);
    const currentDate = new Date();

    // Clear all previous errors
    document.querySelectorAll('.text-red-500').forEach(error => {
      error.classList.add('hidden');
    });

    // Validate form fields
    if (!formData.get('title') || !formData.get('title').trim()) {
    titleError.classList.remove('hidden');
    isValid = false;
    } else {
        titleError.classList.add('hidden');
    }

    if (!formData.get('discount')) {
      discountError.classList.remove('hidden');
      isValid = false;
    } else if (parseFloat(formData.get('discount')) < 0 ) {
      discountError.textContent = 'Discount should be between 0 and 50';
      discountError.classList.remove('hidden');
      isValid = false;
    } else if (parseFloat(formData.get('discount')) > 50) {
      discountError.textContent = 'Maximam offer is 50% of the product price is allowed.';
      discountError.classList.remove('hidden');
      isValid = false;
    } else {
      discountError.textContent = 'This field is required.'
    }
    if (!formData.get('offerType')) {
      document.getElementById('offerType-error').classList.remove('hidden');
      isValid = false;
    }
    if (offerType.value === 'Product' && !formData.get('applicableProduct')) {
      productError.classList.remove('hidden');
      isValid = false;
    }
    if (offerType.value === 'Category' && !formData.get('applicableCategory')) {
      categoryError.classList.remove('hidden');
      isValid = false;
    }
    if (!formData.get('startDate')) {
        startDateError.textContent = 'This field is required.';
        startDateError.classList.remove('hidden');
        isValid = false;
    } else if (new Date(formData.get('startDate')).setHours(0, 0, 0, 0) < currentDate.setHours(0, 0, 0, 0)) {
        startDateError.textContent = 'Start date must be today or in the future.';
        startDateError.classList.remove('hidden');
        isValid = false;
    } else {
        startDateError.classList.add('hidden');
    }

    if (!formData.get('endDate')) {
      endDateError.classList.remove('hidden');
      isValid = false;
    } else if (new Date(formData.get('endDate')) <= new Date(formData.get('startDate'))) {
      endDateError.textContent = 'End date must be later than the start date.';
      endDateError.classList.remove('hidden');
      isValid = false;
    } else {
      endDateError.textContent = 'This field is required.';
    }

    if (!isValid) return;
    // If validation passes, submit form
    const data = Object.fromEntries(formData);
    data.isActive = formData.get('status') === 'on';
    
   
    const response = await fetch('/admin/offer-management', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    });

    if (response.ok) {
    
      Swal.fire({
                        icon: 'success',
                        title: 'Successfully Added!',
                        text: 'Offer added successfully!',
                        background: '#F8F9FA', 
                        color: '#333',
                        timer: 2000,
                        showConfirmButton: false
                    });
      setTimeout(() => {
        location.reload();
      }, 2000);
    
    } else {
      const error = await response.json();
      alert(`Error: ${error.message}`);
    }
  });
});


// ---------- Edit Offer -----------


document.addEventListener('DOMContentLoaded', () => {
        const today = new Date().toISOString().split('T')[0];
        const startDateInput = document.getElementById('edit-startDate');
        const expiryDateInput = document.getElementById('edit-endDate');

       
        startDateInput.min = today;
        expiryDateInput.min = today;

      
        startDateInput.addEventListener('change', () => {
            expiryDateInput.min = startDateInput.value; 
        });
    });


document.addEventListener('DOMContentLoaded', () => {
  // Edit modal references
  const editOfferModal = document.getElementById('edit-offer-modal');
  const editOfferForm = document.getElementById('edit-offer-form');
  const cancelEditBtn = document.getElementById('cancel-edit-btn');
  const editOfferBtns = document.querySelectorAll('.edit-offer-btn');
  let offerId;
  // Populate and show edit modal
  editOfferBtns.forEach(button => {
    button.addEventListener('click', (event) => {
      // Populate modal with offer data
       offerId = event.target.getAttribute('data-id');
      document.getElementById('edit-title').value = event.target.getAttribute('data-title');
      document.getElementById('edit-discount').value = event.target.getAttribute('data-discount');
      document.getElementById('edit-offerType').value = event.target.getAttribute('data-offer-type');
      document.getElementById('edit-applicableProduct').value = event.target.getAttribute('data-applicable-product');
      document.getElementById('edit-applicableCategory').value = event.target.getAttribute('data-applicable-category');
      document.getElementById('edit-startDate').value = event.target.getAttribute('data-start-date');
      document.getElementById('edit-endDate').value = event.target.getAttribute('data-end-date');
      document.getElementById('edit-status').checked = event.target.getAttribute('data-is-active') === 'true';
     
      // Show the modal
      editOfferModal.classList.remove('hidden');

      // Update offer type visibility
      updateEditVisibility();
    });
  });

  // Close edit modal
  cancelEditBtn.addEventListener('click', () => {
    editOfferModal.classList.add('hidden');
  });

  // Update visibility of product/category fields in edit modal
  document.getElementById('edit-offerType').addEventListener('change', updateEditVisibility);

  function updateEditVisibility() {
    const editOfferType = document.getElementById('edit-offerType').value;
    if (editOfferType === 'Product') {
      document.getElementById('edit-productSelect').classList.remove('hidden');
      document.getElementById('edit-categorySelect').classList.add('hidden');
    } else {
      document.getElementById('edit-categorySelect').classList.remove('hidden');
      document.getElementById('edit-productSelect').classList.add('hidden');
    }
  }

  // Handle edit form submission
  editOfferForm.addEventListener('submit', async (event) => {
    event.preventDefault();

    let isValid = true;
    const currentDate = new Date();
    const formData = new FormData(editOfferForm);

      // Error Elements
  const titleError = document.getElementById('edit-title-error');
  const discountError = document.getElementById('edit-discount-error');
  const categoryError = document.getElementById('edit-applicableCategory-error');
  const startDateError = document.getElementById('edit-startDate-error');
  const endDateError = document.getElementById('edit-endDate-error');

    // Clear all previous errors
    document.querySelectorAll('.text-red-500').forEach(error => {
      error.classList.add('hidden');
    });

    // Validate form fields
    if (!formData.get('title') || !formData.get('title').trim()) {
    titleError.classList.remove('hidden');
    isValid = false;
    } else {
        titleError.classList.add('hidden');
    }

    if (!formData.get('discount')) {
      discountError.classList.remove('hidden');
      isValid = false;
    } else if (parseFloat(formData.get('discount')) < 0 ) {
      discountError.textContent = 'Discount should be between 0 and 50';
      discountError.classList.remove('hidden');
      isValid = false;
    } else if (parseFloat(formData.get('discount')) > 50) {
      discountError.textContent = 'Maximam offer is 50% of the product price is allowed.';
      discountError.classList.remove('hidden');
      isValid = false;
    } else {
      discountError.textContent = 'This field is required.'
    }
    if (!formData.get('offerType')) {
      document.getElementById('offerType-error').classList.remove('hidden');
      isValid = false;
    }
    if (offerType.value === 'Category' && !formData.get('applicableCategory')) {
      categoryError.classList.remove('hidden');
      isValid = false;
    }
    if (!formData.get('startDate')) {
        startDateError.textContent = 'This field is required.';
        startDateError.classList.remove('hidden');
        isValid = false;
    } else if (new Date(formData.get('startDate')).setHours(0, 0, 0, 0) < currentDate.setHours(0, 0, 0, 0)) {
        startDateError.textContent = 'Start date must be today or in the future.';
        startDateError.classList.remove('hidden');
        isValid = false;
    } else {
        startDateError.classList.add('hidden');
    }

    if (!formData.get('endDate')) {
      endDateError.classList.remove('hidden');
      isValid = false;
    } else if (new Date(formData.get('endDate')) <= new Date(formData.get('startDate'))) {
      endDateError.textContent = 'End date must be later than the start date.';
      endDateError.classList.remove('hidden');
      isValid = false;
    } else {
      endDateError.textContent = 'This field is required.';
    }

    if (!isValid) return;

    const data = Object.fromEntries(formData);
    data.isActive = formData.get('status') === 'on';

    // const offerId = document.querySelector('.edit-offer-btn[data-id]').getAttribute('data-id');
    console.log(offerId)

    const response = await fetch(`/admin/offer-management/${offerId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    });

    if (response.ok) {
      editOfferModal.classList.add('hidden');
      Swal.fire({
                        icon: 'success',
                        title: 'Successfully Updated!',
                        text: 'Offer updated successfully!',
                        background: '#F8F9FA', 
                        color: '#333',
                        timer: 2000,
                        showConfirmButton: false
                    });
      setTimeout(() => {
        location.reload();
      }, 2000);
    } else {
      const error = await response.json();
      alert(`Error: ${error.message}`);
    }
  });
});


// ------------ Change Status ---------------




// Handle block Unblock
document.querySelectorAll('.block-unblock-btn').forEach(button => {
    button.addEventListener('click', (event) => {
      const offerId = event.target.getAttribute('data-offer-id');
      const isBlocked = event.target.getAttribute('data-blocked') === 'true';
      const modalMessage = document.getElementById('modal-message');
      
      // Show confirmation modal
      const modal = document.getElementById('confirmation-modal');
      modal.classList.remove('hidden');

      // Set the modal message dynamically
      modalMessage.textContent = isBlocked
        ? 'Are you sure you want to block this offer?'
        : 'Are you sure you want to Unblock this offer?';

      // Handle cancel button click
      document.getElementById('status-cancel-btn').addEventListener('click', () => {
       
        modal.classList.add('hidden');
      });

      // Handle confirm button click
      document.getElementById('confirm-btn').onclick = async function() {
        try {
          const response = await fetch(`/admin/offer/${offerId}/block`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status: !isBlocked })  // Send category status to the server
          });

          if (response.ok) {
            // Update the button UI based on the new status
            event.target.textContent = isBlocked ? 'Unblock' : 'Block';  // Update button text
            event.target.setAttribute('data-blocked', !isBlocked);  // Update button's data-blocked attribute
            
            // Toggle the button color between block/unblock states
            event.target.classList.toggle('bg-green-700', isBlocked);
            event.target.classList.toggle('bg-orange-700', !isBlocked);
            event.target.classList.toggle('hover:bg-green-800', isBlocked);
            event.target.classList.toggle('hover:bg-orange-800', !isBlocked);

            // Close the confirmation modal
            modal.classList.add('hidden');

            // Optionally, update the category status in the table without refreshing the page
            const statusCell = event.target.closest('tr').querySelector('td:nth-child(8)');
            statusCell.textContent = isBlocked ? 'Inactive' : 'Active';

            Toastify({
                        text: 'Offer status changed successfully',
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "left", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #00b09b, #96c93d)",
                        },
                        }).showToast();
       

          } else {
            console.error('Failed to update offer status');
          }
        } catch (error) {
          console.error('Error:', error);
        }
      };
    });
});



// ------------- Delete Offer --------------

document.querySelectorAll('.delete-offer-btn').forEach(button => {
  button.addEventListener('click', (event) => {
    
    const offerId = event.target.getAttribute('data-delete-offer-id');
    const modal = document.getElementById('delete-confirmation-modal');
    modal.classList.remove('hidden');

    document.getElementById('delete-cancel-btn').addEventListener('click', () => {
      modal.classList.add('hidden');
    });

    document.getElementById('delete-confirm-btn').addEventListener('click', async () => {
      
      try {
        const response = await fetch(`/admin/offer-management/${offerId}`, {
          method: 'DELETE'
        });

        if(response.ok) {
          window.location.reload();
        } else {
          Toastify({
                        text: 'Failed to delete offer',
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "center", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #ff4e50, #f44336)",
                        },
                        onClick: function(){} // Callback after click
                        }).showToast();
        }
      } catch (error) {
        console.log(error);
      }
    });
    
  });
});

</script>

<style>
  #applicableProduct {
    max-height: 200px;
    overflow-y: auto;
  }
</style>
