<div>
    <!-- Include Sidebar -->
    <%- include('partials/sidebar') %>
  
    <!-- Main Content -->
       <!-- Navbar  -->
       <div class="fixed top-0 left-0 right-0 z-10 flex items-center justify-between p-8 h-20 shadow-md ml-64 bg-gray-100">
        <div>
            <h2 class="text-lg font-semibold">Coupon Management</h2>
        </div>
        <div>
            <form action="#" method="GET">
                <input type="text" name="search" placeholder="Search" class="p-2 w-[500px] h-10 rounded bg-gray-200">
            </form>
        </div>
      </div>
  
    <!-- Add Offer Section -->
    <div class="ml-64 pt-24 pb-16">
      <button
        id="add-coupon-btn"
        class="absolute right-8 top-24 px-4 py-2 bg-blue-800 text-white text-sm tracking-wider font-medium rounded hover:bg-blue-900"
      >
        Add A New Coupon
      </button>


      <div class="font-sans overflow-x-auto ml-8 mr-8 mt-12">
        <table class="min-w-full bg-white">
          <thead class="bg-gray-200 whitespace-nowrap">
            <tr>
                <th class="p-4 text-left text-xs font-bold text-gray-800 w-[5%]">Sl</th>
              <th class="p-4 text-left text-xs font-bold text-gray-800 w-[13%]">
                Code
              </th>
              <th class="p-4 text-left text-xs font-bold text-gray-800 w-[13%]">
                Type
              </th>
              <th class="p-4 text-left text-xs font-bold text-gray-800 w-[13%]">
                Discount
              </th>
              <th class="p-4 text-left text-xs font-bold text-gray-800 w-[13%]">
                Order Value
              </th>
              <th class="p-4 text-left text-xs font-bold text-gray-800 w-[13%]">
                Start Date
              </th>
              <th class="p-4 text-left text-xs font-bold text-gray-800 w-[13%]">
                Expiry Date
              </th>
              <th class="p-4 text-left text-xs font-bold text-gray-800 w-[20%] text-center">
                Actions
              </th>
            </tr>
          </thead>
    
          <tbody class="whitespace-nowrap">
            
            <% coupons.forEach((coupon, index) => { %>
  
              <tr class="hover:bg-gray-50">
                  <td class="p-4  text-[15px] text-gray-800 font-semibold">
                    <%= ((currentPage - 1) * limit) + index + 1 %>
                   
                  </td>
                  <td class="p-4 text-[15px] text-gray-800 font-semibold ">
                    <%= coupon.couponCode %>
                  </td>
                  <td class="p-4 text-[15px] text-gray-800 font-semibold ">
                    <%= coupon.discountType %>
  
                  </td>
                  <td class="p-4 text-[15px] text-gray-800 font-semibold ">
                    <%= coupon.discountValue %>
                  </td>
                  <td class="p-4 text-[15px] text-gray-800 font-semibold ">
                    <%= coupon.minimumOrderValue %>
                  </td>
                  <td class="p-4 text-[15px] text-gray-800 font-semibold ">
                    <%= coupon.startDate ? coupon.startDate.toISOString().split('T')[0] : 'N/A' %>
                  </td>
                  <td class="p-4 text-[15px] text-gray-800 font-semibold ">
                    <%= coupon.expiryDate ? coupon.expiryDate.toISOString().split('T')[0] : 'N/A' %>
                  </td>
                  <td class="p-4 pl-8">
                    <!-- Edit Button -->
                    <button type="button"
                      class="edit-coupon-btn w-20 py-2 text-white rounded-lg text-sm tracking-wider font-medium border border-current outline-none hover:bg-gray-600 bg-gray-500"
                      data-id="<%=coupon._id%>"
                      data-code="<%= coupon.couponCode %>"
                      data-type="<%= coupon.discountType %>"
                      data-discount-value="<%= coupon.discountValue %>"
                      data-order-value="<%= coupon.minimumOrderValue %>"
                      data-usage-limit="<%= coupon.usageLimit %>"
                      data-user-limit="<%= coupon.userLimit %>"
                      data-start-date="<%= coupon.startDate ? coupon.startDate.toISOString().split('T')[0] : '' %>"
                      data-expiry-date="<%= coupon.expiryDate ? coupon.expiryDate.toISOString().split('T')[0] : '' %>"
                  >
                    Edit
                  </button>
                  
                      <button type="button"
                      class="delete-coupon-btn w-20 py-2  text-white rounded-lg text-sm tracking-wider font-medium border border-current outline-none hover:bg-red-700 bg-red-600" 
                      data-delete-coupon-id="<%=coupon._id%>">
                      Delete
                      </button>
                  </td>
                  
                </tr>
  
         <% }) %>
          </tbody>
        </table>
    
        <div class="mt-6 flex justify-center items-center px-8">
          <!-- Previous Button -->
          <!-- <% if (currentPage > 1) { %>
            <a href="?page=<%= currentPage - 1 %>&limit=<%= limit %>" class="px-4 py-2 bg-gray-300 text-sm rounded hover:bg-gray-400">Previous</a>
          <% } else { %>
            <span class="px-4 py-2 bg-gray-300 text-sm rounded opacity-50">Previous</span>
          <% } %> -->
        
          <!-- Page Numbers -->
          <div class="flex space-x-2">
            <% for (let i = 1; i <= totalPages; i++) { %>
              <% if (i === currentPage) { %>
                <span class="px-4 py-2 bg-blue-500 text-white text-sm rounded"><%= i %></span>
              <% } else { %>
                <a href="?page=<%= i %>&limit=<%= limit %>" class="px-4 py-2 bg-gray-300 text-sm rounded hover:bg-gray-400"><%= i %></a>
              <% } %>
            <% } %>
          </div>
        
          <!-- Next Button -->
          <!-- <% if (currentPage < totalPages) { %>
            <a href="?page=<%= currentPage + 1 %>&limit=<%= limit %>" class="px-4 py-2 bg-gray-300 text-sm rounded hover:bg-gray-400">Next</a>
          <% } else { %>
            <span class="px-4 py-2 bg-gray-300 text-sm rounded opacity-50">Next</span>
          <% } %> -->
        </div>
      
    
        
      </div>
  
  
  
      
    </div>
  
  </div>



  <!-- Add Coupon Modal -->
    <div id="addCouponModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center hidden z-50">
        <div class="bg-white w-[500px] rounded-lg shadow-lg p-8">
        <h3 class="text-lg font-semibold mb-4">Add a New Coupon</h3>
        <form id="addCouponForm">
            <div class="mb-4">
            <label for="code" class="block text-sm font-medium mb-1">Coupon Code</label>
            <input type="text" id="code" name="code" class="w-full p-2 border rounded"  />
            <p id="codeError" class="text-red-600 text-sm "></p>
            </div>
    
            <div class="mb-4">
            <label for="discountType" class="block text-sm font-medium mb-1">Discount Type</label>
            <select id="discountType" name="discountType" class="w-full p-2 border rounded" >
                <option value="">Select Discount Type</option>
                <option value="Fixed">Fixed</option>
                <option value="Percentage">Percentage</option>
            </select>
            <p id="typeError" class="text-red-600 text-sm "></p>
            </div>
    
            <div class="mb-4">
            <label for="discountValue" class="block text-sm font-medium mb-1">Discount Value</label>
            <input type="number" id="discountValue" name="discountValue" min="1" class="w-full p-2 border rounded"/>
            <p id="discountError" class="text-red-600 text-sm "></p>
            </div>
    
            <div class="mb-4">
            <label for="minimumOrderValue" class="block text-sm font-medium mb-1">Minimum Order Value</label>
            <input type="number" id="minimumOrderValue" name="minimumOrderValue" min="1" class="w-full p-2 border rounded"/>
            <p id="order-value-error" class="text-red-600 text-sm "></p>
            </div>

            <div class="flex justify-between gap-6">
                 <div class="mb-4 w-1/2 ">
                    <label for="startDate" class="block text-sm font-medium mb-1">Start Date</label>
                    <input type="date" id="startDate" name="startDate" class="w-full p-2 border rounded"  />
                    <p id="start-date-error" class="text-red-600 text-sm "></p>
                 </div>
            
                 <div class="mb-4 w-1/2">
                    <label for="expiryDate" class="block text-sm font-medium mb-1">Expiry Date</label>
                    <input type="date" id="expiryDate" name="expiryDate" class="w-full p-2 border rounded"  />
                    <p id="expiry-date-error" class="text-red-600 text-sm "></p>
                 </div>
            </div>
            
            <div class="flex justify-end">
                
                <button type="button" id="closeModal" class=" bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
                    Cancel
                </button>
                <button type="submit" class="ml-2 bg-blue-800 text-white px-4 py-2 rounded hover:bg-blue-900">
                    Save Coupon
                 </button>
            </div>
            
        </form>
        </div>
    </div>




    // Edit Coupon

    <div id="edit-coupon-modal" class="fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center hidden z-50">
        <div class="bg-white w-[500px] rounded-lg shadow-lg p-8">
        <h3 class="text-lg font-semibold mb-4">Edit Coupon</h3>
        <form id="edit-coupon-form">
            <div class="mb-4">
            <label for="code" class="block text-sm font-medium mb-1">Coupon Code</label>
            <input type="text" id="edit-code" name="couponCode" class="w-full p-2 border rounded"  />
            <p id="edit-codeError" class="text-red-600 text-sm "></p>
            </div>
    
            <div class="mb-4">
            <label for="discountType" class="block text-sm font-medium mb-1">Discount Type</label>
            <select id="edit-discountType" name="discountType" class="w-full p-2 border rounded" >
                <option value="">Select Discount Type</option>
                <option value="Fixed">Fixed</option>
                <option value="Percentage">Percentage</option>
            </select>
            <p id="edit-typeError" class="text-red-600 text-sm "></p>
            </div>
    
            <div class="mb-4">
            <label for="discountValue" class="block text-sm font-medium mb-1">Discount Value</label>
            <input type="number" id="edit-discountValue" name="discountValue" class="w-full p-2 border rounded"/>
            <p id="edit-discountError" class="text-red-600 text-sm "></p>
            </div>
    
            <div class="mb-4">
            <label for="minimumOrderValue" class="block text-sm font-medium mb-1">Minimum Order Value</label>
            <input type="number" id="edit-minimumOrderValue" name="minimumOrderValue" class="w-full p-2 border rounded"/>
            <p id="edit-order-value-error" class="text-red-600 text-sm "></p>
            </div>

            <div class="flex justify-between gap-6">
                 <div class="mb-4 w-1/2 ">
                    <label for="startDate" class="block text-sm font-medium mb-1">Start Date</label>
                    <input type="date" id="edit-startDate" name="startDate" class="w-full p-2 border rounded"  />
                    <p id="edit-start-date-error" class="text-red-600 text-sm "></p>
                 </div>
            
                 <div class="mb-4 w-1/2">
                    <label for="expiryDate" class="block text-sm font-medium mb-1">Expiry Date</label>
                    <input type="date" id="edit-expiryDate" name="expiryDate" class="w-full p-2 border rounded"  />
                    <p id="edit-expiry-date-error" class="text-red-600 text-sm "></p>
                 </div>
            </div>
            
            <div class="flex justify-end">
                
                <button type="button" id="cancel-edit-btn" class=" bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
                    Cancel
                </button>
                <button type="submit" class="ml-2 bg-blue-800 text-white px-4 py-2 rounded hover:bg-blue-900">
                    Save Coupon
                 </button>
            </div>
            
        </form>
        </div>
    </div>

   <!-- Delete Modal -->
    <div id="delete-confirmation-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white p-8 rounded-lg shadow-lg w-[400px]">
        <h2 class="text-xl font-semibold mb-4">Confirm Action</h2>
        <p class="mb-6 text-gray-700">Are you sure you want to delete this coupon?</p>
        <div class="flex justify-end space-x-4">
            <button id="delete-cancel-btn" class="px-4 py-2 bg-gray-300 rounded-lg hover:bg-gray-400">Cancel</button>
            <button id="delete-confirm-btn" class="px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-900">Confirm</button>
        </div>
        </div>
    </div>
  


<script>


 
    document.querySelectorAll('.pagination-link').forEach(link => {
        link.addEventListener('click', async (event) => {
        event.preventDefault();
        const url = event.target.href;

        try {
            const response = await fetch(url);
            const html = await response.text();

            // Replace the table and pagination controls with the new content
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const newTable = doc.querySelector('table');
            const newPagination = doc.querySelector('.pagination-controls');

            document.querySelector('table').innerHTML = newTable.innerHTML;
            document.querySelector('.pagination-controls').innerHTML = newPagination.innerHTML;
        } catch (error) {
            console.error('Error fetching new page:', error);
        }
        });
    });


    // ------------- Add Coupon ---------------

    // modal controller
    const addCouponBtn = document.getElementById('add-coupon-btn');
    const addCouponModal = document.getElementById('addCouponModal');
    const closeModal = document.getElementById('closeModal');

    addCouponBtn.addEventListener('click', () => {
    addCouponModal.classList.remove('hidden');
    });

    closeModal.addEventListener('click', () => {
    addCouponModal.classList.add('hidden');
    resetForm();
    });


    function resetForm() {
    // Reset Input Fields
    document.getElementById('code').value = '';
    document.getElementById('discountType').value = '';
    document.getElementById('discountValue').value = '';
    document.getElementById('minimumOrderValue').value = '';
    document.getElementById('startDate').value = '';
    document.getElementById('expiryDate').value = '';

    // Reset Error Messages
    document.getElementById('codeError').textContent = '';
    document.getElementById('typeError').textContent = '';
    document.getElementById('discountError').textContent = '';
    document.getElementById('order-value-error').textContent = '';
    document.getElementById('start-date-error').textContent = '';
    document.getElementById('expiry-date-error').textContent = '';
    
}



    document.getElementById('addCouponForm').addEventListener('submit', async (e) => {
    e.preventDefault();

    // Input Elements
    const couponCode = document.getElementById('code').value.trim();
    const discountType = document.getElementById('discountType').value;
    const discountValue = parseFloat(document.getElementById('discountValue').value);
    const minimumOrderValue = parseFloat(document.getElementById('minimumOrderValue').value);
    const startDate = document.getElementById('startDate').value;
    const expiryDate = document.getElementById('expiryDate').value;

    // Error Elements
    const codeError = document.getElementById('codeError');
    const couponTypeError = document.getElementById('typeError');
    const discountError = document.getElementById('discountError');
    const orderValueError = document.getElementById('order-value-error');
    const startDateError = document.getElementById('start-date-error');
    const expiryDateError = document.getElementById('expiry-date-error');

    let isValid = true;
    
    // Validate Coupon Code
    if (!couponCode) {
    codeError.textContent = 'Please enter a Coupon code';
    isValid = false;
    } else if (!/^[A-Z][A-ZDFFGSDGG0-9]*$/.test(couponCode)) {
        codeError.textContent = 'Coupon code must start with an alphabetic character and can only contain alphanumeric characters'; 
        isValid = false;
    } else if (couponCode.length < 5 || couponCode.length > 15) {
        codeError.textContent = 'Coupon code length must be between 5 and 15 characters';
        isValid = false;
    } else {
        codeError.textContent = '';
    }

    // Validate Discount Type
    if(!discountType) {
        couponTypeError.textContent = 'Please select a discount type.';
        isValid = false;
    } else {
        couponTypeError.textContent = '';
    }

    // Validate Discount Value
    if(discountType === 'Fixed' && discountValue >= minimumOrderValue) {
        discountError.textContent = 'Discount value must be less than minimum order value.';
        isValid = false;
    } else if (discountType === 'Percentage' && (discountValue <= 0 || discountValue > 100)){
        discountError.textContent = 'Discount percentage must be between 0 to 100';
        isValid = false;
    } else  if(!discountValue) {
        discountError.textContent = 'Please enter a discount value';
        isValid = false;
    } else {
        discountError.textContent = '';
    }

    // Validate Minimum order value
    if(!minimumOrderValue) {
        orderValueError.textContent = 'Please enter a minimum order value.';
        isValid = false;
    } else if( minimumOrderValue < 0 || 50000 < minimumOrderValue){
        orderValueError.textContent = 'Minimum order value should be between 0 and 50000.';
        isValid = false;
    } else {
        orderValueError.textContent = '';
    }

    const currentDate = new Date();
    // Validate Start date
    if(!startDate) {
        startDateError.textContent = 'Please select a date.';
        isValid = false;
    } else if(currentDate.setHours(0, 0, 0, 0) > new Date(startDate).setHours(0, 0, 0, 0)) {
        startDateError.textContent = 'Start date should be today or in the future.';
        isValid = false;
    } else {
        startDateError.textContent = '';
    }

    // Validate Expiry date
    if(!expiryDate) {
        expiryDateError.textContent = 'Please select a date.';
        isValid = false;
    } else if(new Date(startDate) > new Date(expiryDate)) {
        expiryDateError.textContent = 'Expiry date must be later than the start date.';
        isValid = false;
    } else {
        expiryDateError.textContent = '';
    }

    if (!isValid) return;

    // Submit the data to the server
    const couponData = {
        couponCode,
        discountType,
        discountValue,
        minimumOrderValue,
        startDate,
        expiryDate,
    };


    try {
        const response = await fetch('/admin/coupon-management', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(couponData),
        });

        const result = await response.json();

        if (response.ok) {

        addCouponModal.classList.add('hidden');

        Swal.fire({
                        icon: 'success',
                        title: 'Successfully Added',
                        text: 'Coupon Added successfully!',
                        background: '#F8F9FA', 
                        color: '#333',
                        timer: 2000,
                        showConfirmButton: false
                    });
        setTimeout(() => {
            location.reload();
        }, 2000);

        } else {
       
         document.getElementById('codeError').textContent = result.message;
        }
    } catch (error) {
        console.error('Error:', error);
        Toastify({
                        text: 'Oops! Something went wrong, Please try again later',
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "center", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #ff4e50, #f44336)",
                        },
                        onClick: function(){} // Callback after click
                        }).showToast();
    }
    });




    // ------------ Edit Coupon ---------------

    document.addEventListener('DOMContentLoaded', () => {

        const editCouponModal = document.getElementById('edit-coupon-modal');
        const editCouponForm = document.getElementById('edit-coupon-form');
        const cancelEditBtn = document.getElementById('cancel-edit-btn');
        const editCouponsBtns = document.querySelectorAll('.edit-coupon-btn');

        // Input Elements
        const couponCode = document.getElementById('edit-code');
        const discountType = document.getElementById('edit-discountType');
        const discountValue = document.getElementById('edit-discountValue');
        const minimumOrderValue = document.getElementById('edit-minimumOrderValue');
        const startDate = document.getElementById('edit-startDate');
        const expiryDate = document.getElementById('edit-expiryDate');

        // Error Elements
        const codeError = document.getElementById('edit-codeError');
        const couponTypeError = document.getElementById('edit-typeError');
        const discountError = document.getElementById('edit-discountError');
        const orderValueError = document.getElementById('edit-order-value-error');
        const startDateError = document.getElementById('edit-start-date-error');
        const expiryDateError = document.getElementById('edit-expiry-date-error');

        let couponId;

        editCouponsBtns.forEach(button => {
            button.addEventListener('click', (event) => {
                
                // Populate modal with coupon data
                couponId = event.target.getAttribute('data-id');
                couponCode.value = event.target.getAttribute('data-code');
                discountType.value = event.target.getAttribute('data-type');
                discountValue.value = event.target.getAttribute('data-discount-value');
                minimumOrderValue.value = event.target.getAttribute('data-order-value');
                startDate.value = event.target.getAttribute('data-start-date');
                expiryDate.value = event.target.getAttribute('data-expiry-date');

                editCouponModal.classList.remove('hidden');

            });
        });


        cancelEditBtn.addEventListener('click', () => {
            editCouponModal.classList.add('hidden');
            resetForm();
        });


        function resetForm() {
            codeError.textContent = '';
            couponTypeError.textContent = '';
            discountError.textContent = '';
            orderValueError.textContent = '';
            startDateError.textContent = '';
            expiryDateError.textContent = '';
        }



        editCouponForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            const editCouponCode = couponCode.value.trim();
            const editDiscountType = discountType.value;
            const editDiscountValue = parseFloat(discountValue.value);
            const editMinimumOrderValue = parseFloat(minimumOrderValue.value);
            const editStartDate = startDate.value;
            const editExpiryDate = expiryDate.value;
            
            
            const currentDate = new Date();
            let isValid = true;

            // Validate Coupon Code
            if (!editCouponCode) {
                codeError.textContent = 'Please enter a Coupon code';
                isValid = false;
            } else if (!/^[A-Z][A-Z0-9]*$/.test(editCouponCode)) {
                codeError.textContent = 'Coupon code must start with an alphabetic character and can only contain alphanumeric characters'; 
                isValid = false;
            } else if (editCouponCode.length < 5 || editCouponCode.length > 15) {
                codeError.textContent = 'Coupon code length must be between 5 and 15 characters';
                isValid = false;
            } else {
                codeError.textContent = '';
            }

            // Validate Discount Type
            if(!editDiscountType) {
                couponTypeError.textContent = 'Please select a discount type.';
                isValid = false;
            } else {
                couponTypeError.textContent = '';
            }

            // Validate Discount Value
            if(editDiscountType === 'Fixed' && editDiscountValue >= editMinimumOrderValue) {
                discountError.textContent = 'Discount value must be less than minimum order value.';
                isValid = false;
            } else if (editDiscountType === 'Percentage' && (editDiscountValue <= 0 || editDiscountValue > 100)){
                discountError.textContent = 'Discount percentage must be between 0 to 100';
                isValid = false;
            } else  if(!editDiscountValue) {
                discountError.textContent = 'Please enter a discount value';
                isValid = false;
            } else {
                discountError.textContent = '';
            }

            // Validate Minimum order value
            if(!editMinimumOrderValue) {
                orderValueError.textContent = 'Please enter a minimum order value.';
                isValid = false;
            } else {
                orderValueError.textContent = '';
            }

            // Validate Start date
            if(!editStartDate) {
                startDateError.textContent = 'Please select a date.';
                isValid = false;
            } else if(currentDate.setHours(0, 0, 0, 0) > new Date(editStartDate).setHours(0, 0, 0, 0)) {
                startDateError.textContent = 'Start date must be tody or in the future.'
                isValid = false;
            } else {
                startDateError.textContent = '';
            }

            // Validate Expiry date
            if(!editExpiryDate) {
                expiryDateError.textContent = 'Please select a date.';
                isValid = false;
            } else if(new Date(editStartDate) > new Date(editExpiryDate)) {
                expiryDateError.textContent = 'Expiry date must be later than the start date.';
                isValid = false;
            } else {
                expiryDateError.textContent = '';
            }

            if (!isValid) return;

            // Submit the data to the server
            const updatedCouponData = {
                couponCode: editCouponCode,
                discountType: editDiscountType,
                discountValue: editDiscountValue,
                minimumOrderValue: editMinimumOrderValue,
                startDate: editStartDate,
                expiryDate: editExpiryDate
            }

            try {
                const response = await fetch(`/admin/coupon-management/${couponId}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type' : 'application/json' },
                    body: JSON.stringify(updatedCouponData)
                });

                const result = await response.json();

                if (response.ok) {

                    editCouponModal.classList.add('hidden');
                    Swal.fire({
                        icon: 'success',
                        title: 'Successfully Updated',
                        text: 'Coupon Updated successfully!',
                        background: '#F8F9FA', 
                        color: '#333',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } else {
                    codeError.textContent = result.message;
                }
            } catch (error) {
                console.log(error);
                Toastify({
                        text: 'Oops! Something went wrong, Please try again later',
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "center", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #ff4e50, #f44336)",
                        },
                        onClick: function(){} // Callback after click
                 }).showToast();
            }
            
        });

    });


// ------------- Delete Coupon ---------------

document.querySelectorAll('.delete-coupon-btn').forEach(button => {
    button.addEventListener('click', (event) => {
        const couponId = event.target.getAttribute('data-delete-coupon-id');
        const modal = document.getElementById('delete-confirmation-modal');
        modal.classList.remove('hidden');

        document.getElementById('delete-cancel-btn').addEventListener('click', () => {
            modal.classList.add('hidden');
        });

        document.getElementById('delete-confirm-btn').addEventListener('click', async () => {
            try {
                const response = await fetch(`/admin/coupon-management/${couponId}`, {
                    method: 'DELETE'
                });

                if(response.ok) {
                    window.location.reload();
                } else {
                    Toastify({
                        text: 'Failed to delete coupon!',
                        duration: 3000,
                        gravity: "bottom", // `top` or `bottom`
                        position: "center", // `left`, `center` or `right`
                        stopOnFocus: true, // Prevents dismissing of toast on hover
                        style: {
                            background: "linear-gradient(to right, #ff4e50, #f44336)",
                        },
                        onClick: function(){} // Callback after click
                        }).showToast();
                }
            } catch (error) {
                console.log(error);
            }
        });
    });
});


</script>